apiVersion: v1
kind: Namespace
metadata:
  labels:
    name: deeppharmgraph
  name: deeppharmgraph
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: airflow-postgres-secret-transformer
  namespace: deeppharmgraph
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bucket-bucket-secret-transformer
  namespace: deeppharmgraph
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    chart: airflow-1.13.1
    component: run-airflow-migrations
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-migrate-database-job
  namespace: deeppharmgraph
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    chart: airflow-1.13.1
    component: pgbouncer
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-pgbouncer
  namespace: deeppharmgraph
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    chart: airflow-1.13.1
    component: scheduler
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-scheduler
  namespace: deeppharmgraph
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    chart: airflow-1.13.1
    component: statsd
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-statsd
  namespace: deeppharmgraph
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    chart: airflow-1.13.1
    component: triggerer
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-triggerer
  namespace: deeppharmgraph
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    chart: airflow-1.13.1
    component: webserver
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-webserver
  namespace: deeppharmgraph
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    chart: airflow-1.13.1
    component: worker
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-worker
  namespace: deeppharmgraph
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: airflow-postgres-secret-transformer
  namespace: deeppharmgraph
rules:
- apiGroups:
  - ""
  resourceNames:
  - airflow-postgres-app
  - airflow-postgres-app-transformed
  resources:
  - secrets
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: bucket-bucket-secret-transformer
  namespace: deeppharmgraph
rules:
- apiGroups:
  - ""
  resourceNames:
  - dpg-processing-bucket-transformed
  resources:
  - secrets
  verbs:
  - '*'
- apiGroups:
  - ""
  resourceNames:
  - dpg-processing-bucket
  resources:
  - configmaps
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    chart: airflow-1.13.1
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-pod-launcher-role
  namespace: deeppharmgraph
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - list
  - get
  - patch
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
  - get
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    chart: airflow-1.13.1
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-pod-log-reader-role
  namespace: deeppharmgraph
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
  - list
---
apiVersion: role.keycloak.crossplane.io/v1alpha1
kind: Role
metadata:
  name: airflow-admin
spec:
  forProvider:
    clientIdRef:
      name: dpg-airflow-client
    name: admin
    realmId: deeppharmgraph
  providerConfigRef:
    name: keycloak-config
---
apiVersion: role.keycloak.crossplane.io/v1alpha1
kind: Role
metadata:
  name: airflow-op
spec:
  forProvider:
    clientIdRef:
      name: dpg-airflow-client
    name: op
    realmId: deeppharmgraph
  providerConfigRef:
    name: keycloak-config
---
apiVersion: role.keycloak.crossplane.io/v1alpha1
kind: Role
metadata:
  name: airflow-public
spec:
  forProvider:
    clientIdRef:
      name: dpg-airflow-client
    name: public
    realmId: deeppharmgraph
  providerConfigRef:
    name: keycloak-config
---
apiVersion: role.keycloak.crossplane.io/v1alpha1
kind: Role
metadata:
  name: airflow-user
spec:
  forProvider:
    clientIdRef:
      name: dpg-airflow-client
    name: user
    realmId: deeppharmgraph
  providerConfigRef:
    name: keycloak-config
---
apiVersion: role.keycloak.crossplane.io/v1alpha1
kind: Role
metadata:
  name: airflow-viewer
spec:
  forProvider:
    clientIdRef:
      name: dpg-airflow-client
    name: viewer
    realmId: deeppharmgraph
  providerConfigRef:
    name: keycloak-config
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: airflow-postgres-secret-transformer
  namespace: deeppharmgraph
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: airflow-postgres-secret-transformer
subjects:
- kind: ServiceAccount
  name: airflow-postgres-secret-transformer
  namespace: deeppharmgraph
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: bucket-bucket-secret-transformer
  namespace: deeppharmgraph
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: bucket-bucket-secret-transformer
subjects:
- kind: ServiceAccount
  name: bucket-bucket-secret-transformer
  namespace: deeppharmgraph
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    chart: airflow-1.13.1
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-pod-launcher-rolebinding
  namespace: deeppharmgraph
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dpg-airflow-pod-launcher-role
subjects:
- kind: ServiceAccount
  name: dpg-airflow-scheduler
  namespace: deeppharmgraph
- kind: ServiceAccount
  name: dpg-airflow-worker
  namespace: deeppharmgraph
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    chart: airflow-1.13.1
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-pod-log-reader-rolebinding
  namespace: deeppharmgraph
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dpg-airflow-pod-log-reader-role
subjects:
- kind: ServiceAccount
  name: dpg-airflow-webserver
  namespace: deeppharmgraph
- kind: ServiceAccount
  name: dpg-airflow-triggerer
  namespace: deeppharmgraph
---
apiVersion: v1
data:
  AIRFLOW__COMMON_IO__XCOM_OBJECTSTORE_COMPRESSION: gzip
  AIRFLOW__COMMON_IO__XCOM_OBJECTSTORE_THRESHOLD: "1048576"
  AIRFLOW__CORE__XCOM_BACKEND: airflow.providers.common.io.xcom.backend.XComObjectStoreBackend
  AIRFLOW__LOGGING__DELETE_LOCAL_LOGS: "true"
  AIRFLOW__LOGGING__REMOTE_LOGGING: "true"
  AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: "true"
  AUTH_KEYCLOAK_ACCESS_TOKEN_URL: http://id.dev.lan.shamrock.systems/realms/deeppharmgraph/protocol/openid-connect/token
  AUTH_KEYCLOAK_AIRFLOW_BASE_URL: http://dpg-processing.dev.lan.shamrock.systems/
  AUTH_KEYCLOAK_API_BASE_URL: http://id.dev.lan.shamrock.systems/realms/deeppharmgraph/protocol/
  AUTH_KEYCLOAK_AUTHORIZE_URL: http://id.dev.lan.shamrock.systems/realms/deeppharmgraph/protocol/openid-connect/auth
  AUTH_KEYCLOAK_CLIENT_ID: application-airflow
  AUTH_KEYCLOAK_JWKS_URL: http://id.dev.lan.shamrock.systems/realms/deeppharmgraph/protocol/openid-connect/certs
  AUTH_KEYCLOAK_SCOPE: openid
kind: ConfigMap
metadata:
  name: airflow-env-configmap
  namespace: deeppharmgraph
---
apiVersion: v1
data:
  webserver_config.py: |-
    import os
    from typing import Any, Union

    from airflow.www.security import AirflowSecurityManager
    from flask_appbuilder.security.manager import AUTH_OAUTH


    class KeycloakAuthorizer(AirflowSecurityManager):
        def get_oauth_user_info(
                self, provider: str, resp: Any
        ) -> dict[str, Union[str, list[str]]]:
            me = self.appbuilder.sm.oauth_remotes[provider].get("openid-connect/userinfo")
            me.raise_for_status()
            data = me.json()
            payload = {
                "first_name": data.get("given_name", ""),
                "last_name": data.get("family_name", ""),
                "email": data.get("email", ""),
                "name": data.get("name", ""),
                "username": data.get("preferred_username", ""),
                "role_keys": data.get("roles", []),
            }
            print(payload)
            return payload


    AUTH_TYPE = AUTH_OAUTH

    AUTH_ROLES_MAPPING = {
        "admin": ["Admin"],
        "public": ["Public"],
        "viewer": ["Viewer"],
        "user": ["User"],
        "op": ["Op"],
    }

    AUTH_ROLES_SYNC_AT_LOGIN = True
    AUTH_USER_REGISTRATION = True

    OAUTH_PROVIDERS = [
        {
            "name": "keycloak",
            "icon": "fa-key",
            "token_key": "access_token",
            "remote_app": {
                "api_base_url": os.environ["AUTH_KEYCLOAK_API_BASE_URL"],
                "client_kwargs": {"scope": os.environ["AUTH_KEYCLOAK_SCOPE"]},
                "request_token_url": None,
                "access_token_url": os.environ["AUTH_KEYCLOAK_ACCESS_TOKEN_URL"],
                "authorize_url": os.environ["AUTH_KEYCLOAK_AUTHORIZE_URL"],
                "jwks_uri": os.environ["AUTH_KEYCLOAK_JWKS_URL"],
                "client_id": os.environ["AUTH_KEYCLOAK_CLIENT_ID"],
                "client_secret": os.environ["AUTH_KEYCLOAK_CLIENT_SECRET"],
                "airflow_base_url": os.environ["AUTH_KEYCLOAK_AIRFLOW_BASE_URL"],
            },
        }
    ]

    SECURITY_MANAGER_CLASS = KeycloakAuthorizer
kind: ConfigMap
metadata:
  name: airflow-web-configmap
  namespace: deeppharmgraph
---
apiVersion: v1
data:
  airflow.cfg: "[celery]\nflower_url_prefix = \nworker_concurrency = 16\n\n[celery_kubernetes_executor]\nkubernetes_queue
    = kubernetes\n\n[core]\ncolored_console_log = False\ndags_folder = /opt/airflow/dags\nexecutor
    = KubernetesExecutor\nload_examples = False\nremote_logging = False\n\n[elasticsearch]\njson_format
    = True\nlog_id_template = {dag_id}_{task_id}_{execution_date}_{try_number}\n\n[elasticsearch_configs]\nmax_retries
    = 3\nretry_timeout = True\ntimeout = 30\n\n[kerberos]\nccache = /var/kerberos-ccache/cache\nkeytab
    = /etc/airflow.keytab\nprincipal = airflow@FOO.COM\nreinit_frequency = 3600\n\n[kubernetes]\nairflow_configmap
    = dpg-airflow-config\nairflow_local_settings_configmap = dpg-airflow-config\nmulti_namespace_mode
    = False\nnamespace = deeppharmgraph\npod_template_file = /opt/airflow/pod_templates/pod_template_file.yaml\nworker_container_repository
    = shamrock-local-registry.localhost:37311/library/airflow\nworker_container_tag
    = 2.9.0-python3.12\n\n[kubernetes_executor]\nmulti_namespace_mode = False\nnamespace
    = deeppharmgraph\npod_template_file = /opt/airflow/pod_templates/pod_template_file.yaml\nworker_container_repository
    = shamrock-local-registry.localhost:37311/library/airflow\nworker_container_tag
    = 2.9.0-python3.12\n\n[logging]\ncolored_console_log = False\nremote_logging =
    False\n\n[metrics]\nstatsd_host = dpg-airflow-statsd\nstatsd_on = True\nstatsd_port
    = 9125\nstatsd_prefix = airflow\n\n[scheduler]\nrun_duration = 41460\nstandalone_dag_processor
    = False\nstatsd_host = dpg-airflow-statsd\nstatsd_on = True\nstatsd_port = 9125\nstatsd_prefix
    = airflow\n\n[triggerer]\ndefault_capacity = 1000\n\n[webserver]\nenable_proxy_fix
    = True\nrbac = True"
  airflow_local_settings.py: ""
  pod_template_file.yaml: "\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: placeholder-name\n
    \ labels:\n    tier: airflow\n    component: worker\n    release: dpg-airflow\nspec:\n
    \ containers:\n    - envFrom:      \n        - configMapRef:\n            name:
    airflow-env-configmap\n        - secretRef:\n            name: airflow-env-secret\n
    \       - secretRef:\n            name: dpg-processing-bucket\n        - secretRef:\n
    \           name: dpg-processing-bucket-transformed\n        \n      env:\n        -
    name: AIRFLOW__CORE__EXECUTOR\n          value: LocalExecutor      \n        #
    Hard Coded Airflow Envs\n        - name: AIRFLOW__CORE__FERNET_KEY\n          valueFrom:\n
    \           secretKeyRef:\n              name: airflow-fernet-secret\n              key:
    fernet-key\n        - name: AIRFLOW_HOME\n          value: /opt/airflow\n        #
    For Airflow <2.3, backward compatibility; moved to [database] in 2.3\n        -
    name: AIRFLOW__CORE__SQL_ALCHEMY_CONN\n          valueFrom:\n            secretKeyRef:\n
    \             name: airflow-postgres-app-transformed\n              key: connection\n
    \       - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN\n          valueFrom:\n            secretKeyRef:\n
    \             name: airflow-postgres-app-transformed\n              key: connection\n
    \       - name: AIRFLOW_CONN_AIRFLOW_DB\n          valueFrom:\n            secretKeyRef:\n
    \             name: airflow-postgres-app-transformed\n              key: connection\n
    \       - name: AIRFLOW__WEBSERVER__SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n
    \             name: airflow-webserver-secret\n              key: webserver-secret-key
    \     \n        # Dynamically created environment variables\n        # Dynamically
    created secret envs\n        \n        # Extra env      \n      image: shamrock-local-registry.localhost:37311/library/airflow:2.9.0-python3.12\n
    \     imagePullPolicy: IfNotPresent\n      securityContext: \n        allowPrivilegeEscalation:
    false\n        capabilities:\n          drop:\n            - ALL\n      name:
    base\n      resources:\n        {}\n      volumeMounts:\n        - mountPath:
    \"/opt/airflow/logs\"\n          name: logs\n        - name: config\n          mountPath:
    \"/opt/airflow/airflow.cfg\"\n          subPath: airflow.cfg\n          readOnly:
    true\n        - name: config\n          mountPath: \"/opt/airflow/config/airflow_local_settings.py\"\n
    \         subPath: airflow_local_settings.py\n          readOnly: true\n        -
    name: dags\n          mountPath: /opt/airflow/dags\n          readOnly: False\n
    \ restartPolicy: Never\n  securityContext: \n    runAsUser: 50000\n    fsGroup:
    0\n  nodeSelector:\n    {}\n  affinity:\n    {}\n  terminationGracePeriodSeconds:
    600\n  tolerations:\n    []\n  topologySpreadConstraints:\n    []\n  serviceAccountName:
    dpg-airflow-worker\n  volumes:\n  - name: dags\n    persistentVolumeClaim:\n      claimName:
    dags-host-ro\n  - emptyDir:\n      {}\n    name: logs\n  - configMap:\n      name:
    dpg-airflow-config\n    name: config"
kind: ConfigMap
metadata:
  labels:
    chart: airflow-1.13.1
    component: config
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-config
  namespace: deeppharmgraph
---
apiVersion: v1
data:
  mappings.yml: "# Licensed to the Apache Software Foundation (ASF) under one\n# or
    more contributor license agreements.  See the NOTICE file\n# distributed with
    this work for additional information\n# regarding copyright ownership.  The ASF
    licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\");
    you may not use this file except in compliance\n# with the License.  You may obtain
    a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n#
    Unless required by applicable law or agreed to in writing,\n# software distributed
    under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES
    OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for
    the\n# specific language governing permissions and limitations\n# under the License.\n---\n#
    \nmappings:\n  # Map dot separated stats to labels\n  - match: airflow.dagrun.dependency-check.*.*\n
    \   name: \"airflow_dagrun_dependency_check\"\n    labels:\n      dag_id: \"$1\"\n\n
    \ - match: airflow.operator_successes_(.*)\n    match_type: regex\n    name: \"airflow_operator_successes\"\n
    \   labels:\n      operator: \"$1\"\n\n  - match: airflow.operator_failures_(.*)\n
    \   match_type: regex\n    name: \"airflow_operator_failures\"\n    labels:\n
    \     operator: \"$1\"\n\n  - match: airflow.scheduler_heartbeat\n    match_type:
    regex\n    name: \"airflow_scheduler_heartbeat\"\n    labels:\n      type: counter\n\n
    \ - match: airflow.dag.*.*.duration\n    name: \"airflow_task_duration\"\n    labels:\n
    \     dag_id: \"$1\"\n      task_id: \"$2\"\n\n  - match: airflow.dagrun.duration.success.*\n
    \   name: \"airflow_dagrun_duration\"\n    labels:\n      dag_id: \"$1\"\n\n  -
    match: airflow.dagrun.duration.failed.*\n    name: \"airflow_dagrun_failed\"\n
    \   labels:\n      dag_id: \"$1\"\n\n  - match: airflow.dagrun.schedule_delay.*\n
    \   name: \"airflow_dagrun_schedule_delay\"\n    labels:\n      dag_id: \"$1\"\n\n
    \ - match: airflow.dag_processing.last_runtime.*\n    name: \"airflow_dag_processing_last_runtime\"\n
    \   labels:\n      dag_file: \"$1\"\n\n  - match: airflow.dag_processing.last_run.seconds_ago.*\n
    \   name: \"airflow_dag_processing_last_run_seconds_ago\"\n    labels:\n      dag_file:
    \"$1\"\n\n  - match: airflow.pool.open_slots.*\n    name: \"airflow_pool_open_slots\"\n
    \   labels:\n      pool: \"$1\"\n\n  - match: airflow.pool.used_slots.*\n    name:
    \"airflow_pool_used_slots\"\n    labels:\n      pool: \"$1\"\n\n  - match: airflow.pool.starving_tasks.*\n
    \   name: \"airflow_pool_starving_tasks\"\n    labels:\n      pool: \"$1\""
kind: ConfigMap
metadata:
  labels:
    chart: airflow-1.13.1
    component: config
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-statsd
  namespace: deeppharmgraph
---
apiVersion: v1
kind: Secret
metadata:
  name: airflow-env-secret
  namespace: deeppharmgraph
stringData:
  AUTH_KEYCLOAK_CLIENT_SECRET: HxLbmeGmDDcDGuC5eh9MrkQFWYAE3cZE
---
apiVersion: v1
kind: Secret
metadata:
  name: airflow-fernet-secret
  namespace: deeppharmgraph
stringData:
  fernet-key: su8TakfoyJ3Mv6i136Y-i6vcJqhlthL8Q60F9M6GLJM=
---
apiVersion: v1
kind: Secret
metadata:
  name: airflow-webserver-secret
  namespace: deeppharmgraph
stringData:
  webserver-secret-key: e5EqEnDH4wkWxnMf97n7RK7mAyBG2qdu
---
apiVersion: v1
kind: Secret
metadata:
  name: dpg-admin-secret
  namespace: deeppharmgraph
stringData:
  password: password
---
apiVersion: v1
data:
  connection: cmVkaXM6Ly86c2pHRVl0NU5ITkBkcGctYWlyZmxvdy1yZWRpczo2Mzc5LzA=
kind: Secret
metadata:
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "0"
  labels:
    chart: airflow
    component: redis
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-broker-url
  namespace: deeppharmgraph
type: Opaque
---
apiVersion: v1
data:
  pgbouncer.ini: CgoKW2RhdGFiYXNlc10KZHBnLWFpcmZsb3ctbWV0YWRhdGEgPSBob3N0PWRwZy1haXJmbG93LXBvc3RncmVzcWwuZGVlcHBoYXJtZ3JhcGggZGJuYW1lPXBvc3RncmVzIHBvcnQ9NTQzMiBwb29sX3NpemU9MTAgCmRwZy1haXJmbG93LXJlc3VsdC1iYWNrZW5kID0gaG9zdD1kcGctYWlyZmxvdy1wb3N0Z3Jlc3FsLmRlZXBwaGFybWdyYXBoIGRibmFtZT1wb3N0Z3JlcyBwb3J0PTU0MzIgcG9vbF9zaXplPTUgCgpbcGdib3VuY2VyXQpwb29sX21vZGUgPSB0cmFuc2FjdGlvbgpsaXN0ZW5fcG9ydCA9IDY1NDMKbGlzdGVuX2FkZHIgPSAqCmF1dGhfdHlwZSA9IHNjcmFtLXNoYS0yNTYKYXV0aF9maWxlID0gL2V0Yy9wZ2JvdW5jZXIvdXNlcnMudHh0CnN0YXRzX3VzZXJzID0gcG9zdGdyZXMKaWdub3JlX3N0YXJ0dXBfcGFyYW1ldGVycyA9IGV4dHJhX2Zsb2F0X2RpZ2l0cwptYXhfY2xpZW50X2Nvbm4gPSAxMDAKdmVyYm9zZSA9IDAKbG9nX2Rpc2Nvbm5lY3Rpb25zID0gMApsb2dfY29ubmVjdGlvbnMgPSAwCgpzZXJ2ZXJfdGxzX3NzbG1vZGUgPSBwcmVmZXIKc2VydmVyX3Rsc19jaXBoZXJzID0gbm9ybWFs
  users.txt: CiJwb3N0Z3JlcyIgInBvc3RncmVzIgoicG9zdGdyZXMiICJwb3N0Z3JlcyI=
kind: Secret
metadata:
  labels:
    chart: airflow
    component: pgbouncer
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-pgbouncer-config
  namespace: deeppharmgraph
type: Opaque
---
apiVersion: v1
data:
  connection: cG9zdGdyZXNxbDovL3Bvc3RncmVzOnBvc3RncmVzQDEyNy4wLjAuMTo2NTQzL3BnYm91bmNlcj9zc2xtb2RlPWRpc2FibGU=
kind: Secret
metadata:
  labels:
    chart: airflow
    component: pgbouncer
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-pgbouncer-stats
  namespace: deeppharmgraph
type: Opaque
---
apiVersion: v1
data:
  password: c2pHRVl0NU5ITg==
kind: Secret
metadata:
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "0"
  labels:
    chart: airflow
    component: redis
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-redis-password
  namespace: deeppharmgraph
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9127"
    prometheus.io/scrape: "true"
  labels:
    chart: airflow-1.13.1
    component: pgbouncer
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-pgbouncer
  namespace: deeppharmgraph
spec:
  ports:
  - name: pgbouncer
    port: 6543
    protocol: TCP
  - name: pgbouncer-metrics
    port: 9127
    protocol: TCP
  selector:
    component: pgbouncer
    release: dpg-airflow
    tier: airflow
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9102"
    prometheus.io/scrape: "true"
  labels:
    chart: airflow-1.13.1
    component: statsd
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-statsd
  namespace: deeppharmgraph
spec:
  ports:
  - name: statsd-ingest
    port: 9125
    protocol: UDP
    targetPort: 9125
  - name: statsd-scrape
    port: 9102
    protocol: TCP
    targetPort: 9102
  selector:
    component: statsd
    release: dpg-airflow
    tier: airflow
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: airflow-1.13.1
    component: triggerer
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-triggerer
  namespace: deeppharmgraph
spec:
  clusterIP: None
  ports:
  - name: triggerer-logs
    port: 8794
    protocol: TCP
    targetPort: 8794
  selector:
    component: triggerer
    release: dpg-airflow
    tier: airflow
---
apiVersion: v1
kind: Service
metadata:
  labels:
    chart: airflow-1.13.1
    component: webserver
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-webserver
  namespace: deeppharmgraph
spec:
  ports:
  - name: airflow-ui
    port: 8080
  selector:
    component: webserver
    release: dpg-airflow
    tier: airflow
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: dpg-datastore-primary
  namespace: deeppharmgraph
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 7878
  selector:
    app.kubernetes.io/name: oxigraph-primary
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: dags-host-ro
  namespace: deeppharmgraph
spec:
  accessModes:
  - ReadOnlyMany
  capacity:
    storage: 32Gi
  claimRef:
    name: dags-host-ro
    namespace: deeppharmgraph
  hostPath:
    path: /mnt/dpg-airflow-dags
  storageClassName: manual
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: dags-host-ro
  namespace: deeppharmgraph
spec:
  accessModes:
  - ReadOnlyMany
  resources:
    requests:
      storage: 32Gi
  storageClassName: manual
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: oxigraph-primary-pvc
  namespace: deeppharmgraph
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 32Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: airflow-1.13.1
    component: pgbouncer
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-pgbouncer
  namespace: deeppharmgraph
spec:
  replicas: 1
  selector:
    matchLabels:
      component: pgbouncer
      release: dpg-airflow
      tier: airflow
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        checksum/pgbouncer-certificates-secret: 3224c82d398347122016433d054bcba1c2bab5837338418e638897a3462d4759
        checksum/pgbouncer-config-secret: ba4d5d5b3526c1453e9fe0da607f2d3f771bee9ae7e8e460f35d3f26771261e1
      labels:
        component: pgbouncer
        release: dpg-airflow
        tier: airflow
    spec:
      affinity: {}
      containers:
      - command:
        - pgbouncer
        - -u
        - nobody
        - /etc/pgbouncer/pgbouncer.ini
        image: apache/airflow:airflow-pgbouncer-2024.01.19-1.21.0
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - killall -INT pgbouncer && sleep 120
        livenessProbe:
          tcpSocket:
            port: 6543
        name: pgbouncer
        ports:
        - containerPort: 6543
          name: pgbouncer
        readinessProbe:
          tcpSocket:
            port: 6543
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /etc/pgbouncer/pgbouncer.ini
          name: pgbouncer-config
          readOnly: true
          subPath: pgbouncer.ini
        - mountPath: /etc/pgbouncer/users.txt
          name: pgbouncer-config
          readOnly: true
          subPath: users.txt
      - env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              key: connection
              name: dpg-airflow-pgbouncer-stats
        image: apache/airflow:airflow-pgbouncer-exporter-2024.01.19-0.16.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - pgbouncer_exporter
            - health
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
        name: metrics-exporter
        ports:
        - containerPort: 9127
          name: metrics
        readinessProbe:
          exec:
            command:
            - pgbouncer_exporter
            - health
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      nodeSelector: {}
      restartPolicy: Always
      securityContext:
        runAsUser: 65534
      serviceAccountName: dpg-airflow-pgbouncer
      tolerations: []
      topologySpreadConstraints: []
      volumes:
      - name: pgbouncer-config
        secret:
          secretName: dpg-airflow-pgbouncer-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: airflow-1.13.1
    component: scheduler
    executor: KubernetesExecutor
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-scheduler
  namespace: deeppharmgraph
spec:
  replicas: 1
  selector:
    matchLabels:
      component: scheduler
      release: dpg-airflow
      tier: airflow
  template:
    metadata:
      annotations:
        checksum/airflow-config: 8466459dc49a480308efebd899b2811264efe140785d4b0f42e66f504d995c56
        checksum/extra-configmaps: e862ea47e13e634cf17d476323784fa27dac20015550c230953b526182f5cac8
        checksum/extra-secrets: e9582fdd622296c976cbc10a5ba7d6702c28a24fe80795ea5b84ba443a56c827
        checksum/metadata-secret: b2fe937560e9635aeb01fce9100c2f836c5880f81c802565ce95fbcc8a56da4c
        checksum/pgbouncer-config-secret: ba4d5d5b3526c1453e9fe0da607f2d3f771bee9ae7e8e460f35d3f26771261e1
        checksum/result-backend-secret: 98a68f230007cfa8f5d3792e1aff843a76b0686409e4a46ab2f092f6865a1b71
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        component: scheduler
        release: dpg-airflow
        tier: airflow
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  component: scheduler
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - args:
        - bash
        - -c
        - exec airflow scheduler
        env:
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: fernet-key
              name: airflow-fernet-secret
        - name: AIRFLOW_HOME
          value: /opt/airflow
        - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW_CONN_AIRFLOW_DB
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: webserver-secret-key
              name: airflow-webserver-secret
        envFrom:
        - configMapRef:
            name: airflow-env-configmap
        - secretRef:
            name: airflow-env-secret
        - secretRef:
            name: dpg-processing-bucket
        - secretRef:
            name: dpg-processing-bucket-transformed
        image: shamrock-local-registry.localhost:37311/library/airflow:2.9.0-python3.12
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              CONNECTION_CHECK_MAX_COUNT=0 AIRFLOW__LOGGING__LOGGING_LEVEL=ERROR exec /entrypoint \
              airflow jobs check --job-type SchedulerJob --local
          failureThreshold: 5
          initialDelaySeconds: 10
          periodSeconds: 60
          timeoutSeconds: 20
        name: scheduler
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - |
              CONNECTION_CHECK_MAX_COUNT=0 AIRFLOW__LOGGING__LOGGING_LEVEL=ERROR exec /entrypoint \
              airflow jobs check --job-type SchedulerJob --local
          failureThreshold: 6
          periodSeconds: 10
          timeoutSeconds: 20
        volumeMounts:
        - mountPath: /opt/airflow/pod_templates/pod_template_file.yaml
          name: config
          readOnly: true
          subPath: pod_template_file.yaml
        - mountPath: /opt/airflow/logs
          name: logs
        - mountPath: /opt/airflow/airflow.cfg
          name: config
          readOnly: true
          subPath: airflow.cfg
        - mountPath: /opt/airflow/config/airflow_local_settings.py
          name: config
          readOnly: true
          subPath: airflow_local_settings.py
        - mountPath: /opt/airflow/webserver_config.py
          name: webserver-config
          readOnly: true
          subPath: webserver_config.py
        - mountPath: /opt/airflow/dags
          name: dags
          readOnly: false
      - args:
        - bash
        - /clean-logs
        env:
        - name: AIRFLOW__LOG_RETENTION_DAYS
          value: "15"
        - name: AIRFLOW_HOME
          value: /opt/airflow
        image: shamrock-local-registry.localhost:37311/library/airflow:2.9.0-python3.12
        imagePullPolicy: IfNotPresent
        name: scheduler-log-groomer
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs
        - mountPath: /opt/airflow/webserver_config.py
          name: webserver-config
          readOnly: true
          subPath: webserver_config.py
      initContainers:
      - args:
        - airflow
        - db
        - check-migrations
        - --migration-wait-timeout=60
        env:
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: fernet-key
              name: airflow-fernet-secret
        - name: AIRFLOW_HOME
          value: /opt/airflow
        - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW_CONN_AIRFLOW_DB
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: webserver-secret-key
              name: airflow-webserver-secret
        envFrom:
        - configMapRef:
            name: airflow-env-configmap
        - secretRef:
            name: airflow-env-secret
        - secretRef:
            name: dpg-processing-bucket
        - secretRef:
            name: dpg-processing-bucket-transformed
        image: shamrock-local-registry.localhost:37311/library/airflow:2.9.0-python3.12
        imagePullPolicy: IfNotPresent
        name: wait-for-airflow-migrations
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /opt/airflow/airflow.cfg
          name: config
          readOnly: true
          subPath: airflow.cfg
        - mountPath: /opt/airflow/config/airflow_local_settings.py
          name: config
          readOnly: true
          subPath: airflow_local_settings.py
        - mountPath: /opt/airflow/webserver_config.py
          name: webserver-config
          readOnly: true
          subPath: webserver_config.py
      nodeSelector: {}
      restartPolicy: Always
      securityContext:
        fsGroup: 0
        runAsUser: 50000
      serviceAccountName: dpg-airflow-scheduler
      terminationGracePeriodSeconds: 10
      tolerations: []
      topologySpreadConstraints: []
      volumes:
      - configMap:
          name: dpg-airflow-config
        name: config
      - configMap:
          name: airflow-web-configmap
        name: webserver-config
      - name: dags
        persistentVolumeClaim:
          claimName: dags-host-ro
      - emptyDir: {}
        name: logs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: airflow-1.13.1
    component: statsd
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-statsd
  namespace: deeppharmgraph
spec:
  replicas: 1
  selector:
    matchLabels:
      component: statsd
      release: dpg-airflow
      tier: airflow
  template:
    metadata:
      labels:
        component: statsd
        release: dpg-airflow
        tier: airflow
    spec:
      affinity: {}
      containers:
      - args:
        - --statsd.mapping-config=/etc/statsd-exporter/mappings.yml
        image: quay.io/prometheus/statsd-exporter:v0.26.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9102
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        name: statsd
        ports:
        - containerPort: 9125
          name: statsd-ingest
          protocol: UDP
        - containerPort: 9102
          name: statsd-scrape
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9102
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /etc/statsd-exporter/mappings.yml
          name: config
          subPath: mappings.yml
      nodeSelector: {}
      restartPolicy: Always
      securityContext:
        runAsUser: 65534
      serviceAccountName: dpg-airflow-statsd
      tolerations: []
      topologySpreadConstraints: []
      volumes:
      - configMap:
          name: dpg-airflow-statsd
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: airflow-1.13.1
    component: webserver
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-webserver
  namespace: deeppharmgraph
spec:
  replicas: 1
  selector:
    matchLabels:
      component: webserver
      release: dpg-airflow
      tier: airflow
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/airflow-config: 8466459dc49a480308efebd899b2811264efe140785d4b0f42e66f504d995c56
        checksum/extra-configmaps: e862ea47e13e634cf17d476323784fa27dac20015550c230953b526182f5cac8
        checksum/extra-secrets: e9582fdd622296c976cbc10a5ba7d6702c28a24fe80795ea5b84ba443a56c827
        checksum/metadata-secret: b2fe937560e9635aeb01fce9100c2f836c5880f81c802565ce95fbcc8a56da4c
        checksum/pgbouncer-config-secret: ba4d5d5b3526c1453e9fe0da607f2d3f771bee9ae7e8e460f35d3f26771261e1
        checksum/webserver-config: 2f3fdfd294a37094d2abee43b2b09888a5c195ee03414996bf99a4681658af94
        checksum/webserver-secret-key: 97ccb485bcb4d6b5d625617645f8cda75f82731afbd1fa58b643a3bd927c7026
      labels:
        component: webserver
        release: dpg-airflow
        tier: airflow
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  component: webserver
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - args:
        - bash
        - -c
        - exec airflow webserver
        env:
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: fernet-key
              name: airflow-fernet-secret
        - name: AIRFLOW_HOME
          value: /opt/airflow
        - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW_CONN_AIRFLOW_DB
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: webserver-secret-key
              name: airflow-webserver-secret
        envFrom:
        - configMapRef:
            name: airflow-env-configmap
        - secretRef:
            name: airflow-env-secret
        - secretRef:
            name: dpg-processing-bucket
        - secretRef:
            name: dpg-processing-bucket-transformed
        image: shamrock-local-registry.localhost:37311/library/airflow:2.9.0-python3.12
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
        name: webserver
        ports:
        - containerPort: 8080
          name: airflow-ui
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        startupProbe:
          failureThreshold: 6
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          periodSeconds: 10
          timeoutSeconds: 20
        volumeMounts:
        - mountPath: /opt/airflow/pod_templates/pod_template_file.yaml
          name: config
          readOnly: true
          subPath: pod_template_file.yaml
        - mountPath: /opt/airflow/airflow.cfg
          name: config
          readOnly: true
          subPath: airflow.cfg
        - mountPath: /opt/airflow/config/airflow_local_settings.py
          name: config
          readOnly: true
          subPath: airflow_local_settings.py
        - mountPath: /opt/airflow/webserver_config.py
          name: webserver-config
          readOnly: true
          subPath: webserver_config.py
      initContainers:
      - args:
        - airflow
        - db
        - check-migrations
        - --migration-wait-timeout=60
        env:
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: fernet-key
              name: airflow-fernet-secret
        - name: AIRFLOW_HOME
          value: /opt/airflow
        - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW_CONN_AIRFLOW_DB
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: webserver-secret-key
              name: airflow-webserver-secret
        envFrom:
        - configMapRef:
            name: airflow-env-configmap
        - secretRef:
            name: airflow-env-secret
        - secretRef:
            name: dpg-processing-bucket
        - secretRef:
            name: dpg-processing-bucket-transformed
        image: shamrock-local-registry.localhost:37311/library/airflow:2.9.0-python3.12
        imagePullPolicy: IfNotPresent
        name: wait-for-airflow-migrations
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /opt/airflow/airflow.cfg
          name: config
          readOnly: true
          subPath: airflow.cfg
        - mountPath: /opt/airflow/config/airflow_local_settings.py
          name: config
          readOnly: true
          subPath: airflow_local_settings.py
        - mountPath: /opt/airflow/webserver_config.py
          name: webserver-config
          readOnly: true
          subPath: webserver_config.py
      nodeSelector: {}
      restartPolicy: Always
      securityContext:
        fsGroup: 0
        runAsUser: 50000
      serviceAccountName: dpg-airflow-webserver
      tolerations: []
      topologySpreadConstraints: []
      volumes:
      - configMap:
          name: dpg-airflow-config
        name: config
      - configMap:
          name: airflow-web-configmap
        name: webserver-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: oxigraph-primary
  name: oxigraph-primary
  namespace: deeppharmgraph
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: oxigraph-primary
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: oxigraph-primary
    spec:
      containers:
      - args:
        - serve
        - --location
        - /data
        - --bind
        - 0.0.0.0:7878
        image: ghcr.io/oxigraph/oxigraph:0.4.0-alpha.3
        name: oxigraph
        ports:
        - containerPort: 7878
        volumeMounts:
        - mountPath: /data
          name: oxigraph-data
      volumes:
      - name: oxigraph-data
        persistentVolumeClaim:
          claimName: oxigraph-primary-pvc
      - emptyDir: {}
        name: busybox
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    chart: airflow-1.13.1
    component: triggerer
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-triggerer
  namespace: deeppharmgraph
spec:
  replicas: 1
  selector:
    matchLabels:
      component: triggerer
      release: dpg-airflow
      tier: airflow
  serviceName: dpg-airflow-triggerer
  template:
    metadata:
      annotations:
        checksum/airflow-config: 8466459dc49a480308efebd899b2811264efe140785d4b0f42e66f504d995c56
        checksum/extra-configmaps: e862ea47e13e634cf17d476323784fa27dac20015550c230953b526182f5cac8
        checksum/extra-secrets: e9582fdd622296c976cbc10a5ba7d6702c28a24fe80795ea5b84ba443a56c827
        checksum/metadata-secret: b2fe937560e9635aeb01fce9100c2f836c5880f81c802565ce95fbcc8a56da4c
        checksum/pgbouncer-config-secret: ba4d5d5b3526c1453e9fe0da607f2d3f771bee9ae7e8e460f35d3f26771261e1
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        component: triggerer
        release: dpg-airflow
        tier: airflow
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  component: triggerer
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - args:
        - bash
        - -c
        - exec airflow triggerer
        env:
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: fernet-key
              name: airflow-fernet-secret
        - name: AIRFLOW_HOME
          value: /opt/airflow
        - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW_CONN_AIRFLOW_DB
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: webserver-secret-key
              name: airflow-webserver-secret
        envFrom:
        - configMapRef:
            name: airflow-env-configmap
        - secretRef:
            name: airflow-env-secret
        - secretRef:
            name: dpg-processing-bucket
        - secretRef:
            name: dpg-processing-bucket-transformed
        image: shamrock-local-registry.localhost:37311/library/airflow:2.9.0-python3.12
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              CONNECTION_CHECK_MAX_COUNT=0 AIRFLOW__LOGGING__LOGGING_LEVEL=ERROR exec /entrypoint \
              airflow jobs check --job-type TriggererJob --local
          failureThreshold: 5
          initialDelaySeconds: 10
          periodSeconds: 60
          timeoutSeconds: 20
        name: triggerer
        ports:
        - containerPort: 8794
          name: triggerer-logs
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs
        - mountPath: /opt/airflow/airflow.cfg
          name: config
          readOnly: true
          subPath: airflow.cfg
        - mountPath: /opt/airflow/config/airflow_local_settings.py
          name: config
          readOnly: true
          subPath: airflow_local_settings.py
        - mountPath: /opt/airflow/webserver_config.py
          name: webserver-config
          readOnly: true
          subPath: webserver_config.py
        - mountPath: /opt/airflow/dags
          name: dags
          readOnly: false
      - args:
        - bash
        - /clean-logs
        env:
        - name: AIRFLOW__LOG_RETENTION_DAYS
          value: "15"
        - name: AIRFLOW_HOME
          value: /opt/airflow
        image: shamrock-local-registry.localhost:37311/library/airflow:2.9.0-python3.12
        imagePullPolicy: IfNotPresent
        name: triggerer-log-groomer
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs
        - mountPath: /opt/airflow/webserver_config.py
          name: webserver-config
          readOnly: true
          subPath: webserver_config.py
      initContainers:
      - args:
        - airflow
        - db
        - check-migrations
        - --migration-wait-timeout=60
        env:
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: fernet-key
              name: airflow-fernet-secret
        - name: AIRFLOW_HOME
          value: /opt/airflow
        - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW_CONN_AIRFLOW_DB
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: webserver-secret-key
              name: airflow-webserver-secret
        envFrom:
        - configMapRef:
            name: airflow-env-configmap
        - secretRef:
            name: airflow-env-secret
        - secretRef:
            name: dpg-processing-bucket
        - secretRef:
            name: dpg-processing-bucket-transformed
        image: shamrock-local-registry.localhost:37311/library/airflow:2.9.0-python3.12
        imagePullPolicy: IfNotPresent
        name: wait-for-airflow-migrations
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /opt/airflow/airflow.cfg
          name: config
          readOnly: true
          subPath: airflow.cfg
        - mountPath: /opt/airflow/config/airflow_local_settings.py
          name: config
          readOnly: true
          subPath: airflow_local_settings.py
        - mountPath: /opt/airflow/webserver_config.py
          name: webserver-config
          readOnly: true
          subPath: webserver_config.py
      nodeSelector: {}
      restartPolicy: Always
      securityContext:
        fsGroup: 0
        runAsUser: 50000
      serviceAccountName: dpg-airflow-triggerer
      terminationGracePeriodSeconds: 60
      tolerations: []
      topologySpreadConstraints: []
      volumes:
      - configMap:
          name: dpg-airflow-config
        name: config
      - configMap:
          name: airflow-web-configmap
        name: webserver-config
      - name: dags
        persistentVolumeClaim:
          claimName: dags-host-ro
  volumeClaimTemplates:
  - metadata:
      name: logs
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 16Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
  labels:
    chart: airflow-1.13.1
    component: run-airflow-migrations
    heritage: Helm
    release: dpg-airflow
    tier: airflow
  name: dpg-airflow-run-airflow-migrations
  namespace: deeppharmgraph
spec:
  template:
    metadata:
      labels:
        component: run-airflow-migrations
        release: dpg-airflow
        tier: airflow
    spec:
      affinity: {}
      containers:
      - args:
        - bash
        - -c
        - |-
          exec \
          airflow db migrate
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: fernet-key
              name: airflow-fernet-secret
        - name: AIRFLOW_HOME
          value: /opt/airflow
        - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW_CONN_AIRFLOW_DB
          valueFrom:
            secretKeyRef:
              key: connection
              name: airflow-postgres-app-transformed
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: webserver-secret-key
              name: airflow-webserver-secret
        image: shamrock-local-registry.localhost:37311/library/airflow:2.9.0-python3.12
        imagePullPolicy: IfNotPresent
        name: run-airflow-migrations
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /opt/airflow/airflow.cfg
          name: config
          readOnly: true
          subPath: airflow.cfg
        - mountPath: /opt/airflow/config/airflow_local_settings.py
          name: config
          readOnly: true
          subPath: airflow_local_settings.py
      nodeSelector: {}
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 0
        runAsUser: 50000
      serviceAccountName: dpg-airflow-migrate-database-job
      tolerations: []
      topologySpreadConstraints: []
      volumes:
      - configMap:
          name: dpg-airflow-config
        name: config
  ttlSecondsAfterFinished: 300
---
apiVersion: client.keycloak.crossplane.io/v1alpha1
kind: ProtocolMapper
metadata:
  name: airflow-role-mapper
  namespace: deeppharmgraph
spec:
  forProvider:
    clientIdRef:
      name: dpg-airflow-client
    config:
      access.token.claim: "true"
      claim.name: roles
      multivalued: "true"
      userinfo.token.claim: "true"
    name: role-mapper
    protocol: openid-connect
    protocolMapper: oidc-usermodel-client-role-mapper
    realmId: deeppharmgraph
  providerConfigRef:
    name: keycloak-config
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: http-datastore
  namespace: deeppharmgraph
spec:
  hostnames:
  - dpg-datastore.dev.lan.shamrock.systems
  parentRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: eg
    namespace: envoy-gateway-system
  rules:
  - backendRefs:
    - name: dpg-datastore-primary
      port: 80
    matches:
    - path:
        type: PathPrefix
        value: /
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: http-processing-webserver
  namespace: deeppharmgraph
spec:
  hostnames:
  - dpg-processing.dev.lan.shamrock.systems
  parentRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: eg
    namespace: envoy-gateway-system
  rules:
  - backendRefs:
    - name: dpg-airflow-webserver
      port: 8080
    matches:
    - path:
        type: PathPrefix
        value: /
---
apiVersion: group.keycloak.crossplane.io/v1alpha1
kind: Group
metadata:
  name: airflow-admin-group
  namespace: deeppharmgraph
spec:
  deletionPolicy: Delete
  forProvider:
    name: AirflowAdmin
    realmId: deeppharmgraph
  providerConfigRef:
    name: keycloak-config
---
apiVersion: group.keycloak.crossplane.io/v1alpha1
kind: Group
metadata:
  name: airflow-op-group
  namespace: deeppharmgraph
spec:
  deletionPolicy: Delete
  forProvider:
    name: AirflowOp
    realmId: deeppharmgraph
  providerConfigRef:
    name: keycloak-config
---
apiVersion: group.keycloak.crossplane.io/v1alpha1
kind: Group
metadata:
  name: airflow-public-group
  namespace: deeppharmgraph
spec:
  deletionPolicy: Delete
  forProvider:
    name: AirflowPublic
    realmId: deeppharmgraph
  providerConfigRef:
    name: keycloak-config
---
apiVersion: group.keycloak.crossplane.io/v1alpha1
kind: Group
metadata:
  name: airflow-user-group
  namespace: deeppharmgraph
spec:
  deletionPolicy: Delete
  forProvider:
    name: AirflowUser
    realmId: deeppharmgraph
  providerConfigRef:
    name: keycloak-config
---
apiVersion: group.keycloak.crossplane.io/v1alpha1
kind: Group
metadata:
  name: airflow-viewer-group
  namespace: deeppharmgraph
spec:
  deletionPolicy: Delete
  forProvider:
    name: AirflowViewer
    realmId: deeppharmgraph
  providerConfigRef:
    name: keycloak-config
---
apiVersion: group.keycloak.crossplane.io/v1alpha1
kind: Memberships
metadata:
  name: airflow-admin-membership
  namespace: deeppharmgraph
spec:
  forProvider:
    groupIdRef:
      name: airflow-admin-group
    members:
    - admin
    realmId: deeppharmgraph
  providerConfigRef:
    name: keycloak-config
---
apiVersion: group.keycloak.crossplane.io/v1alpha1
kind: Roles
metadata:
  name: airflow-admin-group-roles
  namespace: deeppharmgraph
spec:
  forProvider:
    groupIdRef:
      name: airflow-admin-group
    realmId: deeppharmgraph
    roleIdsRefs:
    - name: airflow-admin
  providerConfigRef:
    name: keycloak-config
---
apiVersion: group.keycloak.crossplane.io/v1alpha1
kind: Roles
metadata:
  name: airflow-op-group-roles
  namespace: deeppharmgraph
spec:
  forProvider:
    groupIdRef:
      name: airflow-op-group
    realmId: deeppharmgraph
    roleIdsRefs:
    - name: airflow-op
  providerConfigRef:
    name: keycloak-config
---
apiVersion: group.keycloak.crossplane.io/v1alpha1
kind: Roles
metadata:
  name: airflow-public-group-roles
  namespace: deeppharmgraph
spec:
  forProvider:
    groupIdRef:
      name: airflow-public-group
    realmId: deeppharmgraph
    roleIdsRefs:
    - name: airflow-public
  providerConfigRef:
    name: keycloak-config
---
apiVersion: group.keycloak.crossplane.io/v1alpha1
kind: Roles
metadata:
  name: airflow-user-group-roles
  namespace: deeppharmgraph
spec:
  forProvider:
    groupIdRef:
      name: airflow-user-group
    realmId: deeppharmgraph
    roleIdsRefs:
    - name: airflow-user
  providerConfigRef:
    name: keycloak-config
---
apiVersion: group.keycloak.crossplane.io/v1alpha1
kind: Roles
metadata:
  name: airflow-viewer-group-roles
  namespace: deeppharmgraph
spec:
  forProvider:
    groupIdRef:
      name: airflow-viewer-group
    realmId: deeppharmgraph
    roleIdsRefs:
    - name: airflow-viewer
  providerConfigRef:
    name: keycloak-config
---
apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: dpg-processing-bucket
  namespace: deeppharmgraph
spec:
  generateBucketName: dpg-processing-bucket
  storageClassName: noobaa.noobaa.io
---
apiVersion: openidclient.keycloak.crossplane.io/v1alpha1
kind: Client
metadata:
  name: dpg-airflow-client
  namespace: deeppharmgraph
spec:
  deletionPolicy: Delete
  forProvider:
    accessType: CONFIDENTIAL
    clientId: application-airflow
    clientSecretSecretRef:
      key: AUTH_KEYCLOAK_CLIENT_SECRET
      name: airflow-env-secret
      namespace: deeppharmgraph
    realmId: deeppharmgraph
    standardFlowEnabled: true
    validRedirectUris:
    - http://dpg-processing.dev.lan.shamrock.systems/oauth-authorized/keycloak
  providerConfigRef:
    name: keycloak-config
---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: airflow-postgres
  namespace: deeppharmgraph
spec:
  instances: 1
  storage:
    size: 16Gi
---
apiVersion: realm.keycloak.crossplane.io/v1alpha1
kind: Realm
metadata:
  name: dpg-keycloak-realm
  namespace: deeppharmgraph
spec:
  forProvider:
    displayName: DeepPharmGraph Barrier
    displayNameHtml: <div class="kc-logo-text"><span>DeepPharmGraph Barrier</span></div>
    enabled: true
    realm: deeppharmgraph
    registrationAllowed: false
    registrationEmailAsUsername: false
    rememberMe: true
    resetPasswordAllowed: true
  providerConfigRef:
    name: keycloak-config
---
apiVersion: templates.kluctl.io/v1alpha1
kind: ObjectTemplate
metadata:
  name: airflow-postgres-secret-transformer
  namespace: deeppharmgraph
spec:
  interval: 1m
  matrix:
  - name: secret
    object:
      ref:
        apiVersion: v1
        kind: Secret
        name: airflow-postgres-app
  prune: true
  serviceAccountName: airflow-postgres-secret-transformer
  templates:
  - object:
      apiVersion: v1
      kind: Secret
      metadata:
        name: airflow-postgres-app-transformed
      stringData:
        connection: '{{ matrix.secret.data.uri | b64decode }}'
---
apiVersion: templates.kluctl.io/v1alpha1
kind: ObjectTemplate
metadata:
  name: bucket-bucket-secret-transformer
  namespace: deeppharmgraph
spec:
  interval: 1m
  matrix:
  - name: configmap
    object:
      ref:
        apiVersion: v1
        kind: ConfigMap
        name: dpg-processing-bucket
  prune: true
  serviceAccountName: bucket-bucket-secret-transformer
  templates:
  - object:
      apiVersion: v1
      kind: Secret
      metadata:
        name: dpg-processing-bucket-transformed
      stringData:
        AIRFLOW__COMMON_IO__XCOM_OBJECTSTORE_PATH: s3://{{ matrix.configmap.data.BUCKET_NAME
          }}/xcom
        AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: s3://{{ matrix.configmap.data.BUCKET_NAME
          }}/logs
        AWS_ENDPOINT_URL: http://{{ matrix.configmap.data.BUCKET_HOST }}
---
apiVersion: user.keycloak.crossplane.io/v1alpha1
kind: User
metadata:
  name: dpg-admin
  namespace: deeppharmgraph
spec:
  forProvider:
    email: example@example.com
    emailVerified: true
    firstName: John
    initialPassword:
    - temporary: false
      valueSecretRef:
        key: password
        name: dpg-admin-secret
        namespace: deeppharmgraph
    lastName: Doe
    realmId: deeppharmgraph
    username: admin
  providerConfigRef:
    name: keycloak-config
