apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow
  namespace: deeppharmgraph
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow
  namespace: deeppharmgraph
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - get
  - delete
  - list
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow
  namespace: deeppharmgraph
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dpg-processing-airflow
subjects:
- kind: ServiceAccount
  name: dpg-processing-airflow
  namespace: deeppharmgraph
---
apiVersion: v1
data:
  AIRFLOW__CELERY__BROKER_URL_CMD: YmFzaCAtYyAnZXZhbCAiJFJFRElTX0NPTk5FQ1RJT05fQ01EIic=
  AIRFLOW__CELERY__FLOWER_PORT: NTU1NQ==
  AIRFLOW__CELERY__RESULT_BACKEND_CMD: YmFzaCAtYyAnZXZhbCAiJERBVEFCQVNFX0NFTEVSWV9DTUQiJw==
  AIRFLOW__CELERY__WORKER_LOG_SERVER_PORT: ODc5Mw==
  AIRFLOW__CORE__DAGS_FOLDER: L29wdC9haXJmbG93L2RhZ3M=
  AIRFLOW__CORE__EXECUTOR: Q2VsZXJ5RXhlY3V0b3I=
  AIRFLOW__CORE__SQL_ALCHEMY_CONN_CMD: YmFzaCAtYyAnZXZhbCAiJERBVEFCQVNFX1NRTEFMQ0hFTVlfQ01EIic=
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN_CMD: YmFzaCAtYyAnZXZhbCAiJERBVEFCQVNFX1NRTEFMQ0hFTVlfQ01EIic=
  AIRFLOW__LOGGING__BASE_LOG_FOLDER: L29wdC9haXJmbG93L2xvZ3M=
  AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: L29wdC9haXJmbG93L2xvZ3MvZGFnX3Byb2Nlc3Nvcl9tYW5hZ2VyL2RhZ19wcm9jZXNzb3JfbWFuYWdlci5sb2c=
  AIRFLOW__LOGGING__WORKER_LOG_SERVER_PORT: ODc5Mw==
  AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: L29wdC9haXJmbG93L2xvZ3Mvc2NoZWR1bGVy
  AIRFLOW__TRIGGERER__DEFAULT_CAPACITY: MTAwMA==
  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: ODA4MA==
  DATABASE_CELERY_CMD: ZWNobyAtbiAiZGIrcG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0ke0RBVEFCQVNFX1BST1BFUlRJRVN9Ig==
  DATABASE_DB: YXBw
  DATABASE_HOST: ZHBnLXByb2Nlc3NpbmctYWlyZmxvdy1wZ2JvdW5jZXIuZGVlcHBoYXJtZ3JhcGguc3ZjLmNsdXN0ZXIubG9jYWw=
  DATABASE_PASSWORD_CMD: ZWNobyAiJHtEQVRBQkFTRV9QQVNTV09SRH0iIHwgcHl0aG9uMyAtYyAiaW1wb3J0IHVybGxpYi5wYXJzZTsgZW5jb2RlZF9wYXNzID0gdXJsbGliLnBhcnNlLnF1b3RlKGlucHV0KCkpOyBwcmludChlbmNvZGVkX3Bhc3MpIg==
  DATABASE_PORT: NjQzMg==
  DATABASE_PROPERTIES: ""
  DATABASE_PSQL_CMD: ZWNobyAtbiAicG9zdGdyZXNxbDovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAxMjcuMC4wLjE6JHtEQVRBQkFTRV9QT1JUfS8ke0RBVEFCQVNFX0RCfSR7REFUQUJBU0VfUFJPUEVSVElFU30i
  DATABASE_SQLALCHEMY_CMD: ZWNobyAtbiAicG9zdGdyZXNxbCtwc3ljb3BnMjovLyQoZXZhbCAkREFUQUJBU0VfVVNFUl9DTUQpOiQoZXZhbCAkREFUQUJBU0VfUEFTU1dPUkRfQ01EKUAke0RBVEFCQVNFX0hPU1R9OiR7REFUQUJBU0VfUE9SVH0vJHtEQVRBQkFTRV9EQn0ke0RBVEFCQVNFX1BST1BFUlRJRVN9Ig==
  DATABASE_USER_CMD: ZWNobyAiJHtEQVRBQkFTRV9VU0VSfSIgfCBweXRob24zIC1jICJpbXBvcnQgdXJsbGliLnBhcnNlOyBlbmNvZGVkX3VzZXIgPSB1cmxsaWIucGFyc2UucXVvdGUoaW5wdXQoKSk7IHByaW50KGVuY29kZWRfdXNlciki
  REDIS_CONNECTION_CMD: ZWNobyAtbiAicmVkaXM6Ly8kKGV2YWwgJFJFRElTX1BBU1NXT1JEX0NNRCkke1JFRElTX0hPU1R9OiR7UkVESVNfUE9SVH0vJHtSRURJU19EQk5VTX0ke1JFRElTX1BST1BFUlRJRVN9Ig==
  REDIS_DBNUM: MQ==
  REDIS_HOST: YWlyZmxvdy1yZWRpcy1zdGFuZGFsb25l
  REDIS_PASSWORD_CMD: ZWNobyAiJHtSRURJU19QQVNTV09SRH0iIHwgcHl0aG9uMyAtYyAiaW1wb3J0IHVybGxpYi5wYXJzZTsgZW5jb2RlZF9wYXNzID0gdXJsbGliLnBhcnNlLnF1b3RlKGlucHV0KCkpOyBwcmludChmXCI6e2VuY29kZWRfcGFzc31AXCIpIGlmIGxlbihlbmNvZGVkX3Bhc3MpID4gMCBlbHNlIE5vbmUi
  REDIS_PORT: NjM3OQ==
  REDIS_PROPERTIES: ""
  TZ: RXRjL1VUQw==
kind: Secret
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-config-envs
  namespace: deeppharmgraph
---
apiVersion: v1
data:
  db_migrations.py: CiMjIyMjIyMjIyMjIyMKIyMgSW1wb3J0cyAjIwojIyMjIyMjIyMjIyMjCmltcG9ydCBsb2dnaW5nCmltcG9ydCB0aW1lCmZyb20gYWlyZmxvdy51dGlscy5kYiBpbXBvcnQgdXBncmFkZWRiCgoKIyMjIyMjIyMjIyMjIwojIyBDb25maWdzICMjCiMjIyMjIyMjIyMjIyMKbG9nID0gbG9nZ2luZy5nZXRMb2dnZXIoX19maWxlX18pCmxvZy5zZXRMZXZlbCgiSU5GTyIpCgojIGhvdyBmcmVxdWVudGx5IHRvIGNoZWNrIGZvciB1bmFwcGxpZWQgbWlncmF0aW9ucwpDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMID0gMzAwCgoKIyMjIyMjIyMjIyMjIyMjCiMjIEZ1bmN0aW9ucyAjIwojIyMjIyMjIyMjIyMjIyMKZnJvbSBhaXJmbG93LnV0aWxzLmRiIGltcG9ydCBjaGVja19taWdyYXRpb25zCgoKZGVmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKSAtPiBib29sOgogICAgIiIiCiAgICBSZXR1cm4gYSBib29sZWFuIHJlcHJlc2VudGluZyBpZiB0aGUgZGF0YWJhc2UgaGFzIHVuYXBwbGllZCBtaWdyYXRpb25zLgogICAgIiIiCiAgICBsb2dfYWxlbWJpYyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKCJhbGVtYmljLnJ1bnRpbWUubWlncmF0aW9uIikKICAgIGxvZ19hbGVtYmljX2xldmVsID0gbG9nX2FsZW1iaWMubGV2ZWwKICAgIHRyeToKICAgICAgICBsb2dfYWxlbWJpYy5zZXRMZXZlbCgiV0FSTiIpCiAgICAgICAgY2hlY2tfbWlncmF0aW9ucygxKQogICAgICAgIGxvZ19hbGVtYmljLnNldExldmVsKGxvZ19hbGVtYmljX2xldmVsKQogICAgICAgIHJldHVybiBGYWxzZQogICAgZXhjZXB0IFRpbWVvdXRFcnJvcjoKICAgICAgICByZXR1cm4gVHJ1ZQoKCmRlZiBhcHBseV9kYl9taWdyYXRpb25zKCkgLT4gTm9uZToKICAgICIiIgogICAgQXBwbHkgYW55IHBlbmRpbmcgREIgbWlncmF0aW9ucy4KICAgICIiIgogICAgbG9nLmluZm8oIi0tLS0tLS0tIFNUQVJUIC0gQVBQTFkgREIgTUlHUkFUSU9OUyAtLS0tLS0tLSIpCiAgICB1cGdyYWRlZGIoKQogICAgbG9nLmluZm8oIi0tLS0tLS0tIEZJTklTSCAtIEFQUExZIERCIE1JR1JBVElPTlMgLS0tLS0tLS0iKQoKCmRlZiBtYWluKHN5bmNfZm9yZXZlcjogYm9vbCk6CiAgICAjIGluaXRpYWwgY2hlY2sgJiBhcHBseQogICAgaWYgbmVlZHNfZGJfbWlncmF0aW9ucygpOgogICAgICAgIGxvZy53YXJuaW5nKCJ0aGVyZSBhcmUgdW5hcHBsaWVkIGRiIG1pZ3JhdGlvbnMsIHRyaWdnZXJpbmcgYXBwbHkuLi4iKQogICAgICAgIGFwcGx5X2RiX21pZ3JhdGlvbnMoKQogICAgZWxzZToKICAgICAgICBsb2cuaW5mbygidGhlcmUgYXJlIG5vIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCBjb250aW51aW5nLi4uIikKCiAgICBpZiBzeW5jX2ZvcmV2ZXI6CiAgICAgICAgIyBkZWZpbmUgdmFyaWFibGUgdG8gdHJhY2sgaG93IGxvbmcgc2luY2UgbGFzdCBtaWdyYXRpb25zIGNoZWNrCiAgICAgICAgbWlncmF0aW9uc19jaGVja19lcG9jaCA9IHRpbWUudGltZSgpCgogICAgICAgICMgbWFpbiBsb29wCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgaWYgKHRpbWUudGltZSgpIC0gbWlncmF0aW9uc19jaGVja19lcG9jaCkgPiBDT05GX19DSEVDS19NSUdSQVRJT05TX0lOVEVSVkFMOgogICAgICAgICAgICAgICAgbG9nLmRlYnVnKGYiY2hlY2sgaW50ZXJ2YWwgcmVhY2hlZCwgY2hlY2tpbmcgZm9yIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLi4uIikKICAgICAgICAgICAgICAgIGlmIG5lZWRzX2RiX21pZ3JhdGlvbnMoKToKICAgICAgICAgICAgICAgICAgICBsb2cud2FybmluZygidGhlcmUgYXJlIHVuYXBwbGllZCBkYiBtaWdyYXRpb25zLCB0cmlnZ2VyaW5nIGFwcGx5Li4uIikKICAgICAgICAgICAgICAgICAgICBhcHBseV9kYl9taWdyYXRpb25zKCkKICAgICAgICAgICAgICAgIG1pZ3JhdGlvbnNfY2hlY2tfZXBvY2ggPSB0aW1lLnRpbWUoKQoKICAgICAgICAgICAgIyBlbnN1cmUgd2UgZG9udCBsb29wIHRvbyBmYXN0CiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC41KQoKCiMjIyMjIyMjIyMjIyMjCiMjIFJ1biBNYWluICMjCiMjIyMjIyMjIyMjIyMjCm1haW4oc3luY19mb3JldmVyPVRydWUp
kind: Secret
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: db-migrations
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-db-migrations
  namespace: deeppharmgraph
---
apiVersion: v1
data:
  gen_auth_file.sh: CiMhL2Jpbi9zaCAtZQoKIyBERVNDUklQVElPTjoKIyAtIHVwZGF0ZXMgdGhlIHBnYm91bmNlciBgYXV0aF9maWxlYCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcwojIC0gY2FsbGVkIGluIG1haW4gcGdib3VuY2VyIGNvbnRhaW5lciBzdGFydC1jb21tYW5kIHNvIHRoYXQgYGF1dGhfZmlsZWAgaXMgdXBkYXRlZCBlYWNoIHJlc3RhcnQsCiMgICBmb3IgZXhhbXBsZSwgd2hlbiB0aGUgbGl2ZW5lc3NQcm9iZSBmYWlscyBkdWUgdG8gYSBEQVRBQkFTRV9QQVNTV09SRCBzZWNyZXQgdXBkYXRlCgojIHZhcmlhYmxlcyB0byBpbmNyZWFzZSBjbGFyaXR5IG9mIHBhdHRlcm4gbWF0Y2hpbmcKT05FX1FVT1RFPSciJwpUV09fUVVPVEU9JyIiJwoKIyBwZ2JvdW5jZXIgcmVxdWlyZXMgYCJgIHRvIGJlIGVzY2FwZWQgYXMgYCIiYApFU0NBUEVEX0RBVEFCQVNFX1VTRVI9IiR7REFUQUJBU0VfVVNFUi8kT05FX1FVT1RFLyRUV09fUVVPVEV9IgpFU0NBUEVEX0RBVEFCQVNFX1BBU1NXT1JEPSIke0RBVEFCQVNFX1BBU1NXT1JELyRPTkVfUVVPVEUvJFRXT19RVU9URX0iCgojIHBnYm91bmNlciByZXF1aXJlcyBhdXRoX2ZpbGUgaW4gZm9ybWF0IGAibXktdXNlcm5hbWUiICJteS1wYXNzd29yZCJgCmVjaG8gXCIkRVNDQVBFRF9EQVRBQkFTRV9VU0VSXCIgXCIkRVNDQVBFRF9EQVRBQkFTRV9QQVNTV09SRFwiID4gL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dAplY2hvICJTdWNjZXNzZnVsbHkgZ2VuZXJhdGVkIGF1dGhfZmlsZTogL2hvbWUvcGdib3VuY2VyL3VzZXJzLnR4dCI=
  gen_self_signed_cert.sh: CiMhL2Jpbi9zaCAtZQoKQ0VSVF9ESVI9Ii9ob21lL3BnYm91bmNlci9nZW5lcmF0ZWQtY2VydHMiCktFWV9GSUxFPSIkQ0VSVF9ESVIvY2xpZW50LmtleSIKQ0VSVF9GSUxFPSIkQ0VSVF9ESVIvY2xpZW50LmNydCIKCiMgY3JlYXRlIHRoZSBkaXJlY3RvcnkgZm9yIHRoZSBzZWxmLXNpZ25lZCBjZXJ0aWZpY2F0ZQpta2RpciAtcCAiJENFUlRfRElSIgoKIyB2YXJpYWJsZXMgZm9yIGNlcnRpZmljYXRlIGdlbmVyYXRpb24KQ09NTU9OX05BTUU9ImxvY2FsaG9zdCIKREFZU19WQUxJRD0zNjUKCiMgZ2VuZXJhdGUgdGhlIHNlbGYtc2lnbmVkIGNlcnRpZmljYXRlIGFuZCBhIHByaXZhdGUga2V5Cm9wZW5zc2wgcmVxIC14NTA5IFwKICAtbmV3a2V5IHJzYTo0MDk2IFwKICAta2V5b3V0ICIkS0VZX0ZJTEUiIFwKICAtb3V0ICIkQ0VSVF9GSUxFIiBcCiAgLWRheXMgIiREQVlTX1ZBTElEIiBcCiAgLXN1YmogIi9DTj0kQ09NTU9OX05BTUUiIFwKICAtbm9kZXMKCiMgc2V0IHBlcm1pc3Npb25zIGZvciB0aGUgcHJpdmF0ZSBrZXkgZmlsZQpjaG1vZCA2MDAgIiRLRVlfRklMRSIKCmVjaG8gIlN1Y2Nlc3NmdWxseSBnZW5lcmF0ZWQgc2VsZi1zaWduZWQgY2VydGlmaWNhdGU6ICRDRVJUX0ZJTEUiCmVjaG8gIlN1Y2Nlc3NmdWxseSBnZW5lcmF0ZWQgc2VsZi1zaWduZWQgY2VydGlmaWNhdGUga2V5OiAkS0VZX0ZJTEUi
  pgbouncer.ini: CltkYXRhYmFzZXNdCiogPSBob3N0PWFpcmZsb3ctcG9zdGdyZXMtcncgcG9ydD01NDMyCgpbcGdib3VuY2VyXQpwb29sX21vZGUgPSB0cmFuc2FjdGlvbgptYXhfY2xpZW50X2Nvbm4gPSAxMDAwCmRlZmF1bHRfcG9vbF9zaXplID0gIDIwCmlnbm9yZV9zdGFydHVwX3BhcmFtZXRlcnMgPSBleHRyYV9mbG9hdF9kaWdpdHMKCmxpc3Rlbl9wb3J0ID0gNjQzMgpsaXN0ZW5fYWRkciA9ICoKCmF1dGhfdHlwZSA9IG1kNQphdXRoX2ZpbGUgPSAvaG9tZS9wZ2JvdW5jZXIvdXNlcnMudHh0Cgpsb2dfZGlzY29ubmVjdGlvbnMgPSAwCmxvZ19jb25uZWN0aW9ucyA9IDAKCiMgbG9ja3Mgd2lsbCBuZXZlciBiZSByZWxlYXNlZCB3aGVuIGBwb29sX21vZGU9dHJhbnNhY3Rpb25gIChhaXJmbG93IGluaXRkYi91cGdyYWRlZGIgc2NyaXB0cyBjcmVhdGUgbG9ja3MpCnNlcnZlcl9yZXNldF9xdWVyeSA9IFNFTEVDVCBwZ19hZHZpc29yeV91bmxvY2tfYWxsKCkKc2VydmVyX3Jlc2V0X3F1ZXJ5X2Fsd2F5cyA9IDEKCiMjIENMSUVOVCBUTFMgU0VUVElOR1MgIyMKY2xpZW50X3Rsc19zc2xtb2RlID0gcHJlZmVyCmNsaWVudF90bHNfY2lwaGVycyA9IG5vcm1hbApjbGllbnRfdGxzX2tleV9maWxlID0gL2hvbWUvcGdib3VuY2VyL2dlbmVyYXRlZC1jZXJ0cy9jbGllbnQua2V5CmNsaWVudF90bHNfY2VydF9maWxlID0gL2hvbWUvcGdib3VuY2VyL2dlbmVyYXRlZC1jZXJ0cy9jbGllbnQuY3J0CgojIyBTRVJWRVIgVExTIFNFVFRJTkdTICMjCnNlcnZlcl90bHNfc3NsbW9kZSA9IHByZWZlcgpzZXJ2ZXJfdGxzX2NpcGhlcnMgPSBub3JtYWw=
kind: Secret
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: pgbouncer
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-pgbouncer
  namespace: deeppharmgraph
---
apiVersion: v1
data:
  sync_users.py: 
kind: Secret
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: sync-users
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-sync-users
  namespace: deeppharmgraph
---
apiVersion: v1
data:
  webserver_config.py: ZnJvbSBmbGFza19hcHBidWlsZGVyLnNlY3VyaXR5Lm1hbmFnZXIgaW1wb3J0IEFVVEhfREIKCiMgdXNlIGVtYmVkZGVkIERCIGZvciBhdXRoCkFVVEhfVFlQRSA9IEFVVEhfREIK
kind: Secret
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-webserver-config
  namespace: deeppharmgraph
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: flower
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-flower
  namespace: deeppharmgraph
spec:
  ports:
  - name: flower
    port: 5555
    protocol: TCP
    targetPort: 5555
  selector:
    app: airflow
    component: flower
    release: dpg-processing-airflow
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: pgbouncer
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-pgbouncer
  namespace: deeppharmgraph
spec:
  ports:
  - name: pgbouncer
    port: 6432
    protocol: TCP
  selector:
    app: airflow
    component: pgbouncer
    release: dpg-processing-airflow
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: web
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-web
  namespace: deeppharmgraph
spec:
  ports:
  - name: web
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: airflow
    component: web
    release: dpg-processing-airflow
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: worker
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-worker
  namespace: deeppharmgraph
spec:
  clusterIP: None
  ports:
  - name: worker
    port: 8793
    protocol: TCP
  selector:
    app: airflow
    component: worker
    release: dpg-processing-airflow
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: db-migrations
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-db-migrations
  namespace: deeppharmgraph
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: db-migrations
      release: dpg-processing-airflow
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/db-migrations-script: 37898f38b90abd06081105d992362ec9e0d0015123b69e758e59031a9e6ddfc9
        checksum/secret-config-envs: 1286c5c053b27def37a6841219f4956bbb6ce8ac39eac2abe120d117df87dded
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: db-migrations
        release: dpg-processing-airflow
    spec:
      affinity: {}
      containers:
      - args:
        - python
        - -u
        - /mnt/scripts/db_migrations.py
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: db-migrations
        resources: {}
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
        - mountPath: /mnt/scripts
          name: scripts
          readOnly: true
      initContainers:
      - args:
        - bash
        - -c
        - exec timeout 60s airflow db check
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: check-db
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      nodeSelector: {}
      restartPolicy: Always
      securityContext:
        fsGroup: 0
      serviceAccountName: dpg-processing-airflow
      tolerations: []
      volumes:
      - emptyDir: {}
        name: logs-data
      - name: scripts
        secret:
          secretName: dpg-processing-airflow-db-migrations
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: flower
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-flower
  namespace: deeppharmgraph
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: flower
      release: dpg-processing-airflow
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1286c5c053b27def37a6841219f4956bbb6ce8ac39eac2abe120d117df87dded
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: flower
        release: dpg-processing-airflow
    spec:
      affinity: {}
      containers:
      - args:
        - bash
        - -c
        - exec airflow celery flower
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - exec curl 'http://localhost:5555'
          failureThreshold: 6
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        name: airflow-flower
        ports:
        - containerPort: 5555
          name: flower
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - exec curl 'http://localhost:5555'
          failureThreshold: 6
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        resources: {}
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      initContainers:
      - args:
        - bash
        - -c
        - exec timeout 60s airflow db check
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: check-db
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      - args:
        - bash
        - -c
        - exec airflow db check-migrations -t 60
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: wait-for-db-migrations
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      nodeSelector: {}
      restartPolicy: Always
      securityContext:
        fsGroup: 0
      serviceAccountName: dpg-processing-airflow
      tolerations: []
      volumes:
      - emptyDir: {}
        name: logs-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: pgbouncer
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-pgbouncer
  namespace: deeppharmgraph
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: pgbouncer
      release: dpg-processing-airflow
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1286c5c053b27def37a6841219f4956bbb6ce8ac39eac2abe120d117df87dded
        checksum/secret-pgbouncer: 4e9f8069d3409019804aa33f690710e2b9e381ea88a829a848b20d8ee46fba38
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: pgbouncer
        release: dpg-processing-airflow
    spec:
      affinity: {}
      containers:
      - args:
        - /bin/sh
        - -c
        - |-
          /home/pgbouncer/config/gen_self_signed_cert.sh && \
          /home/pgbouncer/config/gen_auth_file.sh && \
          exec pgbouncer /home/pgbouncer/config/pgbouncer.ini
        command:
        - /usr/bin/dumb-init
        - --rewrite=15:2
        - --
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: ghcr.io/airflow-helm/pgbouncer:1.18.0-patch.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - psql $(eval $DATABASE_PSQL_CMD) --tuples-only --command="SELECT 1;"
              | grep -q "1"
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 60
        name: pgbouncer
        ports:
        - containerPort: 6432
          name: pgbouncer
          protocol: TCP
        resources: {}
        securityContext:
          runAsGroup: 1001
          runAsUser: 1001
        startupProbe:
          failureThreshold: 30
          initialDelaySeconds: 5
          periodSeconds: 10
          tcpSocket:
            port: 6432
          timeoutSeconds: 15
        volumeMounts:
        - mountPath: /home/pgbouncer/config
          name: pgbouncer-config
          readOnly: true
      nodeSelector: {}
      restartPolicy: Always
      securityContext:
        fsGroup: 0
      serviceAccountName: dpg-processing-airflow
      terminationGracePeriodSeconds: 120
      tolerations: []
      volumes:
      - name: pgbouncer-config
        secret:
          items:
          - key: gen_auth_file.sh
            mode: 493
            path: gen_auth_file.sh
          - key: gen_self_signed_cert.sh
            mode: 493
            path: gen_self_signed_cert.sh
          - key: pgbouncer.ini
            path: pgbouncer.ini
          secretName: dpg-processing-airflow-pgbouncer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: scheduler
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-scheduler
  namespace: deeppharmgraph
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: scheduler
      release: dpg-processing-airflow
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1286c5c053b27def37a6841219f4956bbb6ce8ac39eac2abe120d117df87dded
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: scheduler
        release: dpg-processing-airflow
    spec:
      affinity: {}
      containers:
      - args:
        - bash
        - -c
        - exec airflow scheduler -n -1
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
            - python
            - -Wignore
            - -c
            - |
              import os
              import sys

              # suppress logs triggered from importing airflow packages
              os.environ["AIRFLOW__LOGGING__LOGGING_LEVEL"] = "ERROR"

              # shared imports
              try:
                  from airflow.jobs.job import Job
              except ImportError:
                  # `BaseJob` was renamed to `Job` in airflow 2.6.0
                  from airflow.jobs.base_job import BaseJob as Job
              from airflow.utils.db import create_session
              from airflow.utils.net import get_hostname

              # heartbeat check imports
              try:
                  from airflow.jobs.scheduler_job_runner import SchedulerJobRunner
              except ImportError:
                  # `SchedulerJob` is wrapped by `SchedulerJobRunner` since airflow 2.6.0
                  from airflow.jobs.scheduler_job import SchedulerJob as SchedulerJobRunner

              with create_session() as session:
                  ########################
                  # heartbeat check
                  ########################
                  # ensure the SchedulerJob with most recent heartbeat for this `hostname` is alive
                  hostname = get_hostname()
                  scheduler_job = session \
                      .query(Job) \
                      .filter_by(job_type=SchedulerJobRunner.job_type) \
                      .filter_by(hostname=hostname) \
                      .order_by(Job.latest_heartbeat.desc()) \
                      .limit(1) \
                      .first()
                  if (scheduler_job is not None) and scheduler_job.is_alive():
                      pass
                  else:
                      sys.exit(f"The SchedulerJob (id={scheduler_job.id}) for hostname '{hostname}' is not alive")
          failureThreshold: 5
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 60
        name: airflow-scheduler
        resources: {}
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      - args:
        - bash
        - -c
        - |
          set -euo pipefail

          # break the infinite loop when we receive SIGINT or SIGTERM
          trap "exit 0" SIGINT SIGTERM

          while true; do
            START_EPOCH=$(date --utc +%s)
            echo "[$(date --utc +%FT%T.%3N)] deleting log files older than $RETENTION_MINUTES minutes..."

            # delete all writable files ending in ".log" with modified-time older than $RETENTION_MINUTES
            # NOTE: `-printf "."` prints a "." for each deleted file, which we count the bytes of with `wc -c`
            DELETED_COUNT=$(
              find "$LOG_PATH" \
                -type f \
                -name "*.log" \
                -mmin +"$RETENTION_MINUTES" \
                -writable \
                -delete \
                -printf "." \
              | wc -c
            )

            END_EPOCH=$(date --utc +%s)
            LOOP_DURATION=$((END_EPOCH - START_EPOCH))
            echo "[$(date --utc +%FT%T.%3N)] deleted $DELETED_COUNT files in $LOOP_DURATION seconds"

            SECONDS_TO_SLEEP=$((INTERVAL_SECONDS - LOOP_DURATION))
            if (( SECONDS_TO_SLEEP > 0 )); then
              echo "[$(date --utc +%FT%T.%3N)] waiting $SECONDS_TO_SLEEP seconds..."
              sleep $SECONDS_TO_SLEEP
            fi
          done
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: LOG_PATH
          value: /opt/airflow/logs
        - name: RETENTION_MINUTES
          value: "21600"
        - name: INTERVAL_SECONDS
          value: "900"
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: log-cleanup
        resources: {}
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      initContainers:
      - args:
        - bash
        - -c
        - exec timeout 60s airflow db check
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: check-db
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      - args:
        - bash
        - -c
        - exec airflow db check-migrations -t 60
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: wait-for-db-migrations
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      nodeSelector: {}
      restartPolicy: Always
      securityContext:
        fsGroup: 0
      serviceAccountName: dpg-processing-airflow
      tolerations: []
      volumes:
      - emptyDir: {}
        name: logs-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: sync-users
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-sync-users
  namespace: deeppharmgraph
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: sync-users
      release: dpg-processing-airflow
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1286c5c053b27def37a6841219f4956bbb6ce8ac39eac2abe120d117df87dded
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/sync-users-script: 9733d90da42fbc9e6b1e60df36e22c87aa7c1114a86eb96bb2eae03de9a3b046
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: sync-users
        release: dpg-processing-airflow
    spec:
      affinity: {}
      containers:
      - args:
        - python
        - -u
        - /mnt/scripts/sync_users.py
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: sync-airflow-users
        resources: {}
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
        - mountPath: /mnt/scripts
          name: scripts
          readOnly: true
      initContainers:
      - args:
        - bash
        - -c
        - exec timeout 60s airflow db check
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: check-db
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      - args:
        - bash
        - -c
        - exec airflow db check-migrations -t 60
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: wait-for-db-migrations
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      nodeSelector: {}
      restartPolicy: Always
      securityContext:
        fsGroup: 0
      serviceAccountName: dpg-processing-airflow
      tolerations: []
      volumes:
      - emptyDir: {}
        name: logs-data
      - name: scripts
        secret:
          secretName: dpg-processing-airflow-sync-users
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: triggerer
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-triggerer
  namespace: deeppharmgraph
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: triggerer
      release: dpg-processing-airflow
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1286c5c053b27def37a6841219f4956bbb6ce8ac39eac2abe120d117df87dded
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: triggerer
        release: dpg-processing-airflow
    spec:
      affinity: {}
      containers:
      - args:
        - bash
        - -c
        - exec airflow triggerer
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
            - python
            - -Wignore
            - -c
            - |
              import os
              import sys

              # suppress logs triggered from importing airflow packages
              os.environ["AIRFLOW__LOGGING__LOGGING_LEVEL"] = "ERROR"

              # shared imports
              try:
                  from airflow.jobs.job import Job
              except ImportError:
                  # `BaseJob` was renamed to `Job` in airflow 2.6.0
                  from airflow.jobs.base_job import BaseJob as Job
              from airflow.utils.db import create_session
              from airflow.utils.net import get_hostname

              # heartbeat check imports
              try:
                  from airflow.jobs.triggerer_job_runner import TriggererJobRunner
              except ImportError:
                  # `TriggererJob` is wrapped by `TriggererJobRunner` since airflow 2.6.0
                  from airflow.jobs.triggerer_job import TriggererJob as TriggererJobRunner

              with create_session() as session:
                  # ensure the TriggererJob with most recent heartbeat for this `hostname` is alive
                  hostname = get_hostname()
                  triggerer_job = session \
                      .query(Job) \
                      .filter_by(job_type=TriggererJobRunner.job_type) \
                      .filter_by(hostname=hostname) \
                      .order_by(Job.latest_heartbeat.desc()) \
                      .limit(1) \
                      .first()
                  if (triggerer_job is not None) and triggerer_job.is_alive():
                      pass
                  else:
                      sys.exit(f"The TriggererJob (id={triggerer_job.id}) for hostname '{hostname}' is not alive")
          failureThreshold: 5
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 60
        name: airflow-triggerer
        resources: {}
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      initContainers:
      - args:
        - bash
        - -c
        - exec timeout 60s airflow db check
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: check-db
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      - args:
        - bash
        - -c
        - exec airflow db check-migrations -t 60
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: wait-for-db-migrations
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      nodeSelector: {}
      restartPolicy: Always
      securityContext:
        fsGroup: 0
      serviceAccountName: dpg-processing-airflow
      tolerations: []
      volumes:
      - emptyDir: {}
        name: logs-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: web
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-web
  namespace: deeppharmgraph
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: web
      release: dpg-processing-airflow
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config-webserver-config: 5ffd2744fac9da2f5fa161b3e3e4ea1d50d2e6ac5f630887e738ce7359403e64
        checksum/secret-config-envs: 1286c5c053b27def37a6841219f4956bbb6ce8ac39eac2abe120d117df87dded
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: web
        release: dpg-processing-airflow
    spec:
      affinity: {}
      containers:
      - args:
        - bash
        - -c
        - exec airflow webserver
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /health
            port: web
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        name: airflow-web
        ports:
        - containerPort: 8080
          name: web
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /health
            port: web
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        resources: {}
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
        - mountPath: /opt/airflow/webserver_config.py
          name: webserver-config
          readOnly: true
          subPath: webserver_config.py
      initContainers:
      - args:
        - bash
        - -c
        - exec timeout 60s airflow db check
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: check-db
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      - args:
        - bash
        - -c
        - exec airflow db check-migrations -t 60
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: wait-for-db-migrations
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      nodeSelector: {}
      restartPolicy: Always
      securityContext:
        fsGroup: 0
      serviceAccountName: dpg-processing-airflow
      tolerations: []
      volumes:
      - emptyDir: {}
        name: logs-data
      - name: webserver-config
        secret:
          defaultMode: 420
          secretName: dpg-processing-airflow-webserver-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: airflow
    chart: airflow-8.8.0
    component: worker
    heritage: Helm
    release: dpg-processing-airflow
  name: dpg-processing-airflow-worker
  namespace: deeppharmgraph
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: airflow
      component: worker
      release: dpg-processing-airflow
  serviceName: dpg-processing-airflow-worker
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: 1286c5c053b27def37a6841219f4956bbb6ce8ac39eac2abe120d117df87dded
        checksum/secret-local-settings: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: airflow
        component: worker
        release: dpg-processing-airflow
    spec:
      affinity: {}
      containers:
      - args:
        - bash
        - -c
        - exec airflow celery worker
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        - name: DUMB_INIT_SETSID
          value: "0"
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /usr/bin/dumb-init
            - --
            - /entrypoint
            - python
            - -Wignore
            - -c
            - |
              import os
              import sys
              import subprocess
              from celery import Celery
              from celery.app.control import Inspect
              from typing import List

              def run_command(cmd: List[str]) -> str:
                  process = subprocess.Popen(cmd, stdout=subprocess.PIPE)
                  output, error = process.communicate()
                  if error is not None:
                      raise Exception(error)
                  else:
                      return output.decode(encoding="utf-8")

              broker_url = run_command(["bash", "-c", "eval $AIRFLOW__CELERY__BROKER_URL_CMD"])
              local_celery_host = f"celery@{os.environ['HOSTNAME']}"
              app = Celery(broker=broker_url)

              # ping the local celery worker to see if it's ok
              i = Inspect(app=app, destination=[local_celery_host], timeout=5.0)
              ping_responses = i.ping()
              if local_celery_host not in ping_responses:
                  sys.exit(f"celery worker '{local_celery_host}' did not respond to ping")
          failureThreshold: 5
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 60
        name: airflow-worker
        ports:
        - containerPort: 8793
          name: wlog
          protocol: TCP
        resources: {}
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      - args:
        - bash
        - -c
        - |
          set -euo pipefail

          # break the infinite loop when we receive SIGINT or SIGTERM
          trap "exit 0" SIGINT SIGTERM

          while true; do
            START_EPOCH=$(date --utc +%s)
            echo "[$(date --utc +%FT%T.%3N)] deleting log files older than $RETENTION_MINUTES minutes..."

            # delete all writable files ending in ".log" with modified-time older than $RETENTION_MINUTES
            # NOTE: `-printf "."` prints a "." for each deleted file, which we count the bytes of with `wc -c`
            DELETED_COUNT=$(
              find "$LOG_PATH" \
                -type f \
                -name "*.log" \
                -mmin +"$RETENTION_MINUTES" \
                -writable \
                -delete \
                -printf "." \
              | wc -c
            )

            END_EPOCH=$(date --utc +%s)
            LOOP_DURATION=$((END_EPOCH - START_EPOCH))
            echo "[$(date --utc +%FT%T.%3N)] deleted $DELETED_COUNT files in $LOOP_DURATION seconds"

            SECONDS_TO_SLEEP=$((INTERVAL_SECONDS - LOOP_DURATION))
            if (( SECONDS_TO_SLEEP > 0 )); then
              echo "[$(date --utc +%FT%T.%3N)] waiting $SECONDS_TO_SLEEP seconds..."
              sleep $SECONDS_TO_SLEEP
            fi
          done
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: LOG_PATH
          value: /opt/airflow/logs
        - name: RETENTION_MINUTES
          value: "21600"
        - name: INTERVAL_SECONDS
          value: "900"
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: log-cleanup
        resources: {}
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      initContainers:
      - args:
        - bash
        - -c
        - exec timeout 60s airflow db check
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: check-db
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      - args:
        - bash
        - -c
        - exec airflow db check-migrations -t 60
        command:
        - /usr/bin/dumb-init
        - --
        - /entrypoint
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: airflow-postgres-app
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-postgres-app
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: airflow-redis-secret
        - name: CONNECTION_CHECK_MAX_COUNT
          value: "0"
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__CORE__FERNET_KEY
              name: airflow-env-secret
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AIRFLOW__WEBSERVER__SECRET_KEY
              name: airflow-env-secret
        envFrom:
        - secretRef:
            name: dpg-processing-airflow-config-envs
        image: apache/airflow:2.6.3-python3.9
        imagePullPolicy: IfNotPresent
        name: wait-for-db-migrations
        securityContext:
          runAsGroup: 0
          runAsUser: 50000
        volumeMounts:
        - mountPath: /opt/airflow/logs
          name: logs-data
      nodeSelector: {}
      restartPolicy: Always
      securityContext:
        fsGroup: 0
      serviceAccountName: dpg-processing-airflow
      terminationGracePeriodSeconds: 60
      tolerations: []
      volumes:
      - emptyDir: {}
        name: logs-data
  updateStrategy:
    type: RollingUpdate
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: airflow-env-secret
  namespace: deeppharmgraph
spec:
  encryptedData:
    AIRFLOW__CORE__FERNET_KEY: AgBCW9GpP5QZWRpyerJ0fFeee5fSaXdQKXcp+Q8/NSpi2xZz8Rtt+Ku4B8mF+oMw0wlbvDz5yQPj1PQbAFBXhSZYjKbsHw6Z78GQ0hS7P+OZ1XzuBrEoIpiYEua/2fpQEpbxE64/zAhDgsgfTT0swCjJaNTy1xZfgi2I67wcjIeWblyQ3RCAB8C9xUn+g2gDI5Kpb6KNNcVhGAwiOASFaAK5OF/A6cRhJKZlTpt/FroIelrlI8dRxf6wjIGs6VU/Xp48bsrRTrAwWQrDGUVwpgifQtaf9Dw7Y/gA8RCn23guYU5u6ZkxGwA8a8DqBOkucJlsGQ5z5EERVHc7NlFmVFpOloeP29vnprrT+ZPHAjXPyNX8Q/c+iLOBX+XPTbRSIeGB30YVzVZ8M6lKKHhLdQg7q/mUY/A4MzY8lTZXJJVxEIsPhGuH+MNYsBAj+AZqTjD+F2KRLQmj68Df9KXoMoKDCQzAWqC3LxK1cMXAXS2atsw8Ej5kUZIJ5O9WssnAXc7L58fe/7MW3l+lokXyOgult32cKX/U8v4Dwqshn+q8IoCPmBIbw7xTYaG7MfXfLhZWF2h3+PnA6JY7ww3jpYV/K/c00uC/dD7kAm21FZoV5kzQ2dPXq+AGzcmhIqCIEak8ELK5Do5nA6SoUJhBApXfiPYC8sryoK9eVuvf5BHh0RME9EA/ES2+lTWUboUsI1jdCb/dCGjrQjlA845pLL6h4gbFMDyTT0qCnxxA8Y0IEG1eOt9hUbCJ/EpQ1g==
    AIRFLOW__WEBSERVER__SECRET_KEY: AgB7G7PKEh+UpGGJQBvEZtegjjD5Rspg8odGEzjpZZV6FPGtWsdeN1O95JW7Wm7ynLms0La4ifIT/DrUx0T9ITmjJ3M/cBp6RiAgicEDAq9FxNocOiERwsT6HJHgHN9Na28y7/n0QdAy9ZKzj/4uREt/alRGSa/ot3nMjbYeuDqUiiZGokR9+VZ3ESyyPYetwlDCezts18KtSsrrO1OSRQBCsSeY9oMh0YUdC8XGhTAcsPAyndDP/guTVuQPzXCnQm0PJstYXZUj/I5dQ04A1pF2dK52KOHRBAm2QPtJTzZuSWDdGuAPaKZC6uUXfyEGTtuQN05uH2ZmVUfrt4eFS+oNylkWnIzlKFaYjdMB+7qkRZGMXyiTZ2ZZZkA57tcJxRQxW82Tf4avnHmBDOe6IfuH6F5hvoSbh6qdh7L597OkDOFyrC1Go55x9b3nEXG/doWz1tK61LUfzGK0ybcy/TUlzPqpv5lTpqtSz9NtG/dIz2gtOuhufwcpq82vNZravUni0/4douO/oxoVCdZPSmheOYlG48rRUR3fD4smvyXXBVdaiqbBk8ECZlu6z1EPSLq61bxsDT6fWH/CDJ2wsI3LIlX56HRYgZXCQQozjgx1o866/R9u9/S4k52eMQJyfhkR6bkgdRMpW8CapMvgp1Wgz/00hIN46WfcvOWn3mqtH/ADnu8h2f6OVAHvn0KVkQrmN+t6dSt0To5r3sYjraybgPiCFXQV9fu4skOaGk/v5w==
  template:
    metadata:
      creationTimestamp: null
      name: airflow-env-secret
      namespace: deeppharmgraph
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: airflow-redis-secret
  namespace: deeppharmgraph
spec:
  encryptedData:
    password: AgC8OrhNQQ8jlF1inlEcLwXhFsSZv94SKDFtbZ9YanB7AcZvnwpa8X2+SIHV8F9+SjcAeAc26Wd6lfznclJdPzrKIB0d18TLwPFQGxMF1vocJV3vU/RDx9vuOICY2XUjrRrR01UC0IDxCkCXd0RIbLBNOiwvZcSQCC2+NGOfcOLl1eS9NnwsJ6GVo+eDMNNDbiZRTNQPFA1VpAPcPTTOz+ZgMuNbthiLs6dbjFKTmbYjJc2lj0B4A3ttEiYC0MQLQvSCWTfTdFj9jlgkJtPrn6b9zWA6iZ6hiOh09EXTtu0KDJo1wnFsjZvdsxGhw5eAAyCNKpAxLy7UP/nWLOTYdUaCVi0HvDiv/uf0J96Gz0HEJZiVa02JH/yyltF5Z7KvVbObZHE4A2qceYujieCeZXezYro0n5FIbs+PBkHRP+rR56IvwAwK1J9OdxMCPpo0zLTDV0H+i4tlnI8gmPsmc2mWmeNPzpefOmEioffQyYtuSxMCzidl1onMCuah2kXsdCLZ5Il7fbK5aCUCos4bT9d3AIBkIIbq6Gsp4WRAiscVrat5ewaHJft0Rm2qmIgfuoeSLr/dhIXlAhAffixeWG2+ADDMgRKPyS+jwDANqtL+yqgxEFnqyedT2PK7JVhxFsMxdbM3vNiy+6nIroOEgysa1eMXWJ2fwvMBSpCtIRNFerwtS60pxGkTlSOMyrCyH+PMix1eU0meFJPViynhLo2fwhQ2zai+Pc1tjDjMANqP6Q==
  template:
    metadata:
      creationTimestamp: null
      name: airflow-redis-secret
      namespace: deeppharmgraph
---
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: http-processing-webserver
  namespace: deeppharmgraph
spec:
  hostnames:
  - dpg-processing.shamrock.systems
  parentRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: http-gateway
    namespace: kube-system
  rules:
  - backendRefs:
    - group: ""
      kind: Service
      name: dpg-processing-airflow-webserver
      port: 8080
      weight: 1
    matches:
    - path:
        type: PathPrefix
        value: /
---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: airflow-postgres
  namespace: deeppharmgraph
spec:
  instances: 1
  storage:
    size: 16Gi
---
apiVersion: redis.redis.opstreelabs.in/v1beta2
kind: Redis
metadata:
  name: airflow-redis-standalone
  namespace: deeppharmgraph
spec:
  kubernetesConfig:
    image: quay.io/opstree/redis:v7.0.12
    imagePullPolicy: IfNotPresent
    redisSecret:
      key: password
      name: airflow-redis-secret
  podSecurityContext:
    fsGroup: 1000
    runAsUser: 1000
  redisExporter:
    enabled: true
    image: quay.io/opstree/redis-exporter:v1.44.0
  storage:
    volumeClaimTemplate:
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
