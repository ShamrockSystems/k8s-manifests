apiVersion: v1
kind: Namespace
metadata:
  labels:
    name: kubernetes-dashboard
  name: kubernetes-dashboard
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
rules:
- apiGroups:
  - ""
  resourceNames:
  - kubernetes-dashboard-key-holder
  - kubernetes-dashboard-csrf
  resources:
  - secrets
  verbs:
  - get
  - update
  - delete
- apiGroups:
  - ""
  resourceNames:
  - kubernetes-dashboard-settings
  resources:
  - configmaps
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resourceNames:
  - kubernetes-dashboard-metrics-scraper
  - http:kubernetes-dashboard-metrics-scraper
  resources:
  - services/proxy
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
  name: kubernetes-dashboard
rules:
- apiGroups:
  - metrics.k8s.io
  resources:
  - pods
  - nodes
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubernetes-dashboard
subjects:
- kind: ServiceAccount
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
  name: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubernetes-dashboard
subjects:
- kind: ServiceAccount
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
---
apiVersion: v1
data: null
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kubernetes-dashboard
    helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
  name: kubernetes-dashboard-settings
  namespace: kubernetes-dashboard
---
apiVersion: v1
data:
  config.yaml: |-
    server:
      bindAddress: "0.0.0.0:4180"
    providers:
      - id: "shamrock"
        provider: "oidc"
        clientID: "e0cfdff3-907c-45fc-b2a8-d96f611fa500"
        clientSecret: "${SHAMROCK_CLIENT_SECRET}"
        oidcConfig:
          issuerURL: "https://sts.windows.net/7380c786-e737-424b-b1ff-fa4e2ff85ef4/"
          audienceClaims: ["aud"]
          userIDClaim: "upn"
          emailClaim: "upn"
          groupsClaim: "groups"
        azureConfig:
          tenant: "7380c786-e737-424b-b1ff-fa4e2ff85ef4"
    injectRequestHeaders:
      - name: "Authorization"
        values:
          - prefix: "Bearer "
            claim: "id_token"
    upstreamConfig:
      upstreams:
        - id: "web"
          path: "/"
          uri: "http://kubernetes-dashboard-web:8000"
        - id: "api"
          path: "/api/"
          uri: "http://kubernetes-dashboard-api:9000/api"
kind: ConfigMap
metadata:
  name: oauth2-proxy-cm
  namespace: kubernetes-dashboard
---
apiVersion: v1
data:
  OAUTH2_PROXY_COOKIE_REFRESH: 60m
  OAUTH2_PROXY_EMAIL_DOMAINS: shamrock.systems
  OAUTH2_PROXY_REDIS_CONNECTION_URL: redis://oauth2-proxy-redis:6379
  OAUTH2_PROXY_SESSION_STORE_TYPE: redis
  OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"
kind: ConfigMap
metadata:
  name: oauth2-proxy-env-cm
  namespace: kubernetes-dashboard
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: api
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubernetes-dashboard-api
    app.kubernetes.io/part-of: kubernetes-dashboard
    app.kubernetes.io/version: v1.0.0
    helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
  name: kubernetes-dashboard-api
  namespace: kubernetes-dashboard
spec:
  ports:
  - name: api
    port: 9000
  selector:
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/name: kubernetes-dashboard-api
    app.kubernetes.io/part-of: kubernetes-dashboard
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: metrics-scraper
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
    app.kubernetes.io/part-of: kubernetes-dashboard
    app.kubernetes.io/version: v1.0.9
    helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
  name: kubernetes-dashboard-metrics-scraper
  namespace: kubernetes-dashboard
spec:
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
    app.kubernetes.io/part-of: kubernetes-dashboard
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubernetes-dashboard-web
    app.kubernetes.io/part-of: kubernetes-dashboard
    app.kubernetes.io/version: v1.0.0
    helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
  name: kubernetes-dashboard-web
  namespace: kubernetes-dashboard
spec:
  ports:
  - name: web
    port: 8000
  selector:
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/name: kubernetes-dashboard-web
    app.kubernetes.io/part-of: kubernetes-dashboard
---
apiVersion: v1
kind: Service
metadata:
  name: oauth2-proxy
  namespace: kubernetes-dashboard
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 4180
  selector:
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/name: oauth2-proxy
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: api
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubernetes-dashboard-api
    app.kubernetes.io/part-of: kubernetes-dashboard
    app.kubernetes.io/version: v1.0.0
    helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
  name: kubernetes-dashboard-api
  namespace: kubernetes-dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/name: kubernetes-dashboard-api
      app.kubernetes.io/part-of: kubernetes-dashboard
  template:
    metadata:
      labels:
        app.kubernetes.io/component: api
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kubernetes-dashboard-api
        app.kubernetes.io/part-of: kubernetes-dashboard
        app.kubernetes.io/version: v1.0.0
        helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
    spec:
      containers:
      - args:
        - --enable-insecure-login
        - --namespace=kubernetes-dashboard
        image: docker.io/kubernetesui/dashboard-api:v1.0.0
        imagePullPolicy: IfNotPresent
        name: kubernetes-dashboard-api
        ports:
        - containerPort: 9000
          name: api
          protocol: TCP
        resources:
          limits:
            cpu: 250m
            memory: 400Mi
          requests:
            cpu: 100m
            memory: 200Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 2001
          runAsUser: 1001
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: kubernetes-dashboard
      volumes:
      - emptyDir: {}
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: metrics-scraper
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
    app.kubernetes.io/part-of: kubernetes-dashboard
    app.kubernetes.io/version: v1.0.9
    helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
  name: kubernetes-dashboard-metrics-scraper
  namespace: kubernetes-dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
      app.kubernetes.io/part-of: kubernetes-dashboard
  template:
    metadata:
      labels:
        app.kubernetes.io/component: metrics-scraper
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
        app.kubernetes.io/part-of: kubernetes-dashboard
        app.kubernetes.io/version: v1.0.9
        helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
    spec:
      containers:
      - image: docker.io/kubernetesui/metrics-scraper:v1.0.9
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: kubernetes-dashboard-metrics-scraper
        ports:
        - containerPort: 8000
          protocol: TCP
        resources:
          limits:
            cpu: 250m
            memory: 400Mi
          requests:
            cpu: 100m
            memory: 200Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 2001
          runAsUser: 1001
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: kubernetes-dashboard
      volumes:
      - emptyDir: {}
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/instance: kubernetes-dashboard
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kubernetes-dashboard-web
    app.kubernetes.io/part-of: kubernetes-dashboard
    app.kubernetes.io/version: v1.0.0
    helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
  name: kubernetes-dashboard-web
  namespace: kubernetes-dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/name: kubernetes-dashboard-web
      app.kubernetes.io/part-of: kubernetes-dashboard
  template:
    metadata:
      labels:
        app.kubernetes.io/component: web
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: kubernetes-dashboard-web
        app.kubernetes.io/part-of: kubernetes-dashboard
        app.kubernetes.io/version: v1.0.0
        helm.sh/chart: kubernetes-dashboard-7.0.0-alpha1
    spec:
      containers:
      - image: docker.io/kubernetesui/dashboard-web:v1.0.0
        imagePullPolicy: IfNotPresent
        name: kubernetes-dashboard-web
        ports:
        - containerPort: 8000
          name: web
          protocol: TCP
        resources:
          limits:
            cpu: 250m
            memory: 400Mi
          requests:
            cpu: 100m
            memory: 200Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 2001
          runAsUser: 1001
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: kubernetes-dashboard
      volumes:
      - emptyDir: {}
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oauth2-proxy
  namespace: kubernetes-dashboard
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/name: oauth2-proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/name: oauth2-proxy
    spec:
      containers:
      - args:
        - --alpha-config
        - /config/config.yaml
        envFrom:
        - configMapRef:
            name: oauth2-proxy-env-cm
        - secretRef:
            name: oauth2-proxy-secret
        image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /ping
            port: http
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: oauth2-proxy
        ports:
        - containerPort: 4180
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /ping
            port: http
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /config
          name: config
      volumes:
      - configMap:
          name: oauth2-proxy-cm
        name: config
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: oauth2-proxy-secret
  namespace: kubernetes-dashboard
spec:
  encryptedData:
    OAUTH2_PROXY_COOKIE_SECRET: AgATahvwupnkLIDZxvzANPfJsN6dh1CrcvBFgM/f8GcC5s8CIfkggfpvXVVD15WvQwgKoej+IPnbE+vA2gurtwQebhRRJuYTuRRZ9vm7LBAaWrs/CkRu0DrtSJqbs3U/S0i4NohdB93xYH5RhmcZxUT7b1lKZfeoYD9blzfMvJ9ynOENBp0ckr6pa6EWSeXmZyx7xfwAHlArN276OY7ScwypTZsj3NTvad3JHrLbrlO7V2W0Jb4voNPAbxM0KzJdUa8sTcFBi/SXrewuA86pWbwE5y6UD/Njw/obddqXn7DI3erej+BdWcuYswVhP11UIyAfHjQhGRPdGsMjepzjxLSQZEY8GbKkq5YghVRCsnSf3hK60sy4Fp4COgyQgw7thI0Pv/F7sYlBYqIChcI/eSgXqlvSgH6yaUz/wNmbqaPI6TEWZ/mOemoLheegbuv73jB+4uXnZvY3e6jMHDL791qkS4TnsqM5/8L2z/h5ep7iflgjkAO7UvURxSLBRwXSrHLLGVM4JK1oW9CBY0vqZ/Cvt/plXk3qqzaI0CLk59HyUtG9Sy8Fc8sAqXfIHaboiaG0hKOHRIqBIAKgLLRuHg3ZQMWuqssOBaoFJJOWSzUG5gkMLb7SXffmxcNLf1dSp3qsUIJ/XhfwXy7fak1J/9NYxVCsUxarr05VXu6wbkcl72bi4LWmJMFw0KoUe0Yg2g8tPYg2p5FlNltBiwF4UBOGayOm3KK5KO+ee5fBubHgng==
    OAUTH2_PROXY_REDIS_PASSWORD: AgDSOlyZQW+sPg3gqJKeT+um2jjE3AeOE6iI02eigUc4+UAHPlo1UDGlF1IvXqlMgMLGjVFvvnvF/rbGmgdEbITb3BMynG/15NQvgAskOtKevEfr+hV7MoC6bLpVh8dkd01W/NqEEAZ1lUr9ZiqC8+s8JF1lJ9WR5ikspvC5XgyywVszmVvsPvW94Za1BxfWwWtCDJs5jzNtWQEpT2oJ/8SZhGdhyTMKR6Ptk2+Jc57vrWKkCLD/qLFXgYc2YkyluGi+3XR5Pgwvw/UOHcdMShfrM1gl8+m0NdykXGX/qsEPeIJ8Lv65XCeesM42Pdd6hOVy9YvqYk7NIl2ekdJ5lfAuuMJfI5s5a5WiZgE6/oDQRR+HIkQh2GZOibPbDq6EsnSHBCh6xIK4HnpBUfUBJESFbVOtQA7U7PBn/iTUtQhU6iHo8jBstL2BbDHJkZ/Z9CaR0X/hr9TTLD8gdGRYdLiSyKgabaGsuMacd590p/eJxFwX+zhI72KpANmZwjprRcmOILxSUbClA7J6jnPe4FGiF6eKVpHdindMymJagQlRuPVRHti3O1sl2EhevKPllRM6+UZMXaekMoRkvIcQgX+T6bsVSYuFpWZHJwhVgGAIQPgnm1TSp+pi7j5MybOqMBJWGozN0Xk0E1dcTrYF+Y5ur2KkiQg+HsaY65E1jjN/GFU7JT7sd3jpsah16u0KE0oNJ9j+gZHWycdAVO93Iampe7UhYPt6Pc3a7hq6dpKBA6uhH58=
    SHAMROCK_CLIENT_SECRET: AgBw+5rkCG/pni2bKGuXD2huH8FhW6ttHNQC/iub705ytVvD9V7EUrjDT/ORiF+ApbsRf7C9dyTNrsuuSwCteh0cuZxP9Y5Cwx5X4YzldXIuMzXuhoL6PFMgxIz/p9qSc1XwjVsd9liSqYBFuhaQBgh7+otxc4Bpy+/6WRxqOhEqmAfPjl6gT2GcaZS5SbcforOSGkbXzJdkxtDtfjsEAW8hlMEOTLgMzuzDMqFVKNW/fmxKvB4msuQiU902FABK8FejKN44182wu0cZa2yYCcrF+PL+ZRfczTP3dpiqo51vFzdjlFpyVy8sCosoZdDEeS78YO7V7FrJujSlVRzZJw55ATZZ34ObKGqrJ+cxz2envmtxX2shFdVeSET4sv/LCeJSHYgf2LjKyWuOJrboAfZF/QZDYGhiXFoEHr6Cfp4tRWc785StGEcxbQy0xgR6sjIl7IRP8eEvvlSoQSUK1yigJ54pPKyY2ORwCErVhVUEKJWDt2gvXZeUy5a6RvjWpc7fq+wNZc6sXZ1H/fWHPwP9iBUT7LrBxsWQBjIpgc0v+aGUh1SF+hc2NJ40VzqVw8RS8JyRT6uhh4L57PmIrhOy0wI2/+RdrEYZs4SdtRVWXfnoaKNEpkxdqpdetzBWf58uAmzGumGv8b2Mu0b/vMb+DPQBi3KwRRgXamhV8BZO41l/8rEVbEr3gRhpV0OL4yuKXXhenoUMSOlPEVRFVC3hhzJnBVFiUgAOpChGbkzvrJIK/JD+euPp
  template:
    metadata:
      creationTimestamp: null
      name: oauth2-proxy-secret
      namespace: kubernetes-dashboard
---
apiVersion: gateway.networking.k8s.io/v1beta1
kind: HTTPRoute
metadata:
  name: http-dashboard
  namespace: kubernetes-dashboard
spec:
  hostnames:
  - metal-k8s.shamrock.systems
  parentRefs:
  - group: gateway.networking.k8s.io
    kind: Gateway
    name: http-gateway
    namespace: kube-system
  rules:
  - backendRefs:
    - group: ""
      kind: Service
      name: oauth2-proxy
      port: 80
      weight: 1
    matches:
    - path:
        type: PathPrefix
        value: /
---
apiVersion: redis.redis.opstreelabs.in/v1beta2
kind: Redis
metadata:
  name: oauth2-proxy-redis
  namespace: kubernetes-dashboard
spec:
  kubernetesConfig:
    image: quay.io/opstree/redis:v7.0.12
    imagePullPolicy: IfNotPresent
    redisSecret:
      key: OAUTH2_PROXY_REDIS_PASSWORD
      name: oauth2-proxy-secret
  podSecurityContext:
    fsGroup: 1000
    runAsUser: 1000
  redisExporter:
    enabled: true
    image: quay.io/opstree/redis-exporter:v1.44.0
  storage:
    volumeClaimTemplate:
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
